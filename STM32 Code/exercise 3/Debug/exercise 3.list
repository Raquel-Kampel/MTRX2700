
exercise 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002cc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000460  08000460  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000460  08000460  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08000460  08000460  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000460  08000460  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000460  08000460  00010460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000464  08000464  00010464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08000468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020058  2**0
                  CONTENTS
 10 .bss          0000001c  20000058  20000058  00020058  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  00020058  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 14 .debug_line   000001b3  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000a4  00000000  00000000  0002027e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000048  00000000  00000000  00020322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  0002036a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  00020390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00000091  00000000  00000000  000203d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  00020469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  00020484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000058 	.word	0x20000058
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000448 	.word	0x08000448

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000005c 	.word	0x2000005c
 80001d0:	08000448 	.word	0x08000448

080001d4 <enable_peripheral_clocks>:

@ function to enable the clocks for the peripherals we could be using (A, B, C, D and E)
enable_peripheral_clocks:

	@ load the address of the RCC address boundary (for enabling the IO clock)
	LDR R0, =RCC
 80001d4:	486f      	ldr	r0, [pc, #444]	; (8000394 <main+0x10>)

	@ enable all of the GPIO peripherals in AHBENR
	LDR R1, [R0, #AHBENR]
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOE_ENABLE | 1 << GPIOD_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOB_ENABLE | 1 << GPIOA_ENABLE  @ enable GPIO
 80001d8:	f441 1178 	orr.w	r1, r1, #4063232	; 0x3e0000
	STR R1, [R0, #AHBENR]
 80001dc:	6141      	str	r1, [r0, #20]

	BX LR @ return
 80001de:	4770      	bx	lr

080001e0 <enable_uart>:
enable_uart:

	@make a note about the different ways that we set specific bits in this configuration section

	@ select which UART you want to enable
	LDR R0, =GPIOC
 80001e0:	486d      	ldr	r0, [pc, #436]	; (8000398 <main+0x14>)

	@ set the alternate function for the UART pins (what ever you have selected)
	LDR R1, =0x77
 80001e2:	f04f 0177 	mov.w	r1, #119	; 0x77
	STRB R1, [R0, AFRL + 2]
 80001e6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22

	@ modify the mode of the GPIO pins you want to use to enable 'alternate function mode'
	LDR R1, [R0, GPIO_MODER]
 80001ea:	6801      	ldr	r1, [r0, #0]
	ORR R1, 0xA00 @ Mask for pins to change to 'alternate function mode'
 80001ec:	f441 6120 	orr.w	r1, r1, #2560	; 0xa00
	STR R1, [R0, GPIO_MODER]
 80001f0:	6001      	str	r1, [r0, #0]

	@ modify the speed of the GPIO pins you want to use to enable 'high speed'
	LDR R1, [R0, GPIO_OSPEEDR]
 80001f2:	6881      	ldr	r1, [r0, #8]
	ORR R1, 0xF00 @ Mask for pins to be set as high speed
 80001f4:	f441 6170 	orr.w	r1, r1, #3840	; 0xf00
	STR R1, [R0, GPIO_OSPEEDR]
 80001f8:	6081      	str	r1, [r0, #8]

	@ Set the enable bit for the specific UART you want to use
	@ Note: this might be in APB1ENR or APB2ENR
	@ you can find this out by looking in the datasheet
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 80001fa:	4866      	ldr	r0, [pc, #408]	; (8000394 <main+0x10>)
	LDR R1, [R0, #APB2ENR] @ load the original value from the enable register
 80001fc:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << UART_EN  @ apply the bit mask to the previous values of the enable the UART
 80001fe:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
	STR R1, [R0, #APB2ENR] @ store the modified enable register values back to RCC
 8000202:	6181      	str	r1, [r0, #24]

	@ this is the baud rate
	MOV R1, #0x46 @ from our earlier calculations (for 8MHz), store this in register R1
 8000204:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =UART @ the base address for the register to turn clocks on/off
 8000208:	4864      	ldr	r0, [pc, #400]	; (800039c <main+0x18>)
	STRH R1, [R0, #USART_BRR] @ store this value directly in the first half word (16 bits) of
 800020a:	8181      	strh	r1, [r0, #12]
							  	 @ the baud rate register

	@ we want to set a few things here, lets define their bit positions to make it more readable
	LDR R0, =UART @ the base address for the register to set up the specified UART
 800020c:	4863      	ldr	r0, [pc, #396]	; (800039c <main+0x18>)
	LDR R1, [R0, #USART_CR1] @ load the original value from the enable register
 800020e:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @ make a bit mask with a '1' for the bits to enable,
 8000210:	f041 010d 	orr.w	r1, r1, #13
													   @ apply the bit mask to the previous values of the enable register

	STR R1, [R0, #USART_CR1] @ store the modified enable register values back to RCC
 8000214:	6001      	str	r1, [r0, #0]

	BX LR @ return
 8000216:	4770      	bx	lr

08000218 <change_clock_speed>:

@ set the PLL (clocks are described in page 125 of the large manual)
change_clock_speed:
@ step 1, set clock to HSE (the external clock)
	@ enable HSE (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000218:	485e      	ldr	r0, [pc, #376]	; (8000394 <main+0x10>)
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 800021a:	6801      	ldr	r1, [r0, #0]
	LDR R2, =1 << HSEBYP | 1 << HSEON @ make a bit mask with a '1' in the 0th bit position
 800021c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
	ORR R1, R2 @ apply the bit mask to the previous values of the enable register
 8000220:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC
 8000224:	6001      	str	r1, [r0, #0]

08000226 <wait_for_HSERDY>:

	@ wait for the changes to be completed
wait_for_HSERDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000226:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << HSERDY @ Test the HSERDY bit (check if it is 1)
 8000228:	f411 3f00 	tst.w	r1, #131072	; 0x20000
	BEQ wait_for_HSERDY
 800022c:	d0fb      	beq.n	8000226 <wait_for_HSERDY>

@ step 2, now the clock is HSE, we are allowed to switch to PLL
	@ clock is set to External clock (external crystal) - 8MHz, can enable the PLL now
	LDR R1, [R0, #RCC_CFGR] @ load the original value from the enable register
 800022e:	6841      	ldr	r1, [r0, #4]
	LDR R2, =1 << 20 | 1 << PLLSRC | 1 << 22 @ the last term is for the USB prescaler to be 1
 8000230:	f44f 02a2 	mov.w	r2, #5308416	; 0x510000
	ORR R1, R2  @ set PLLSRC (use PLL) and PLLMUL to 0100 - bit 20 is 1 (set speed as 6x faster)
 8000234:	ea41 0102 	orr.w	r1, r1, r2
				@ see page 140 of the large manual for options
				@ NOTE: cannot go faster than 72MHz)
	STR R1, [R0, #RCC_CFGR] @ store the modified enable register values back to RCC
 8000238:	6041      	str	r1, [r0, #4]

	@ enable PLL (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 800023a:	4856      	ldr	r0, [pc, #344]	; (8000394 <main+0x10>)
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 800023c:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << PLLON @ apply the bit mask to turn on the PLL
 800023e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC
 8000242:	6001      	str	r1, [r0, #0]

08000244 <wait_for_PLLRDY>:

wait_for_PLLRDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000244:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << PLLRDY @ Test the HSERDY bit (check if it is 1)
 8000246:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
	BEQ wait_for_PLLRDY
 800024a:	d0fb      	beq.n	8000244 <wait_for_PLLRDY>

@ step 3, PLL is ready, switch over the system clock to PLL
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 800024c:	4851      	ldr	r0, [pc, #324]	; (8000394 <main+0x10>)
	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 800024e:	6841      	ldr	r1, [r0, #4]
	MOV R2, 1 << 10 | 1 << 1  @ some more settings - bit 1 (SW = 10)  - PLL set as system clock
 8000250:	f240 4202 	movw	r2, #1026	; 0x402
									   @ bit 10 (HCLK=100) divided by 2 (clock is faster, need to prescale for peripherals)
	ORR R1, R2	@ Set the values of these two clocks (turn them on)
 8000254:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 8000258:	6041      	str	r1, [r0, #4]

	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 800025a:	6841      	ldr	r1, [r0, #4]
	ORR R1, 1 << USBPRE	@ Set the USB prescaler (when PLL is on for the USB)
 800025c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 8000260:	6041      	str	r1, [r0, #4]

	BX LR @ return
 8000262:	4770      	bx	lr

08000264 <initialise_power>:

@ initialise the power systems on the microcontroller
@ PWREN (enable power to the clock), SYSCFGEN system clock enable
initialise_power:

	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000264:	484b      	ldr	r0, [pc, #300]	; (8000394 <main+0x10>)

	@ enable clock power in APB1ENR
	LDR R1, [R0, #APB1ENR]
 8000266:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN @ apply the bit mask for power enable
 8000268:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
	STR R1, [R0, #APB1ENR]
 800026c:	61c1      	str	r1, [r0, #28]

	@ enable clock config in APB2ENR
	LDR R1, [R0, #APB2ENR]
 800026e:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN @ apply the bit mask to allow clock configuration
 8000270:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR]
 8000274:	6181      	str	r1, [r0, #24]

	BX LR @ return
 8000276:	4770      	bx	lr

08000278 <part_a_main>:
.text
@ define text


part_a_main:
	MOV R2, #0	@ flag for if button was pressed on the previous check
 8000278:	f04f 0200 	mov.w	r2, #0

0800027c <wait_for_button>:


wait_for_button:

	LDR R3, =GPIOA		@ port for the input button
 800027c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
	LDR R4, [R3, IDR]	@ load input data register for port A
 8000280:	691c      	ldr	r4, [r3, #16]
	AND R4, 1 			@ check if PA0 (button input) is 1 (pressed)
 8000282:	f004 0401 	and.w	r4, r4, #1
	CMP R4, 1
 8000286:	2c01      	cmp	r4, #1
	BEQ tx_loop			@ if button is pressed, transmit message
 8000288:	d002      	beq.n	8000290 <tx_loop>

	MOV R2, #0
 800028a:	f04f 0200 	mov.w	r2, #0

	B wait_for_button
 800028e:	e7f5      	b.n	800027c <wait_for_button>

08000290 <tx_loop>:


@ this is the entry function called from the c file
tx_loop:

	CMP R2, 1
 8000290:	2a01      	cmp	r2, #1
	BEQ wait_for_button
 8000292:	d0f3      	beq.n	800027c <wait_for_button>

	LDR R0, =UART
 8000294:	4841      	ldr	r0, [pc, #260]	; (800039c <main+0x18>)
	LDR R1, =tx_string
 8000296:	4942      	ldr	r1, [pc, #264]	; (80003a0 <main+0x1c>)

	MOV R2, #1
 8000298:	f04f 0201 	mov.w	r2, #1

0800029c <tx_uart>:
	@ LDR R4, [R4]


tx_uart:

	LDR R3, [R0, USART_ISR] @ load the status of the UART
 800029c:	69c3      	ldr	r3, [r0, #28]
	ANDS R3, 1 << UART_TXE  @ 'AND' the current status with the bit mask that we are interested in
 800029e:	f013 0380 	ands.w	r3, r3, #128	; 0x80
						    @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	@ loop back to check status again if the flag indicates there is no byte waiting
	BEQ tx_uart
 80002a2:	d0fb      	beq.n	800029c <tx_uart>

	@ load the next value in the string into the transmit buffer for the specified UART
	LDRB R5, [R1], #1
 80002a4:	f811 5b01 	ldrb.w	r5, [r1], #1

	CMP R5, #0x24 @ check if the '$' symbol has been reached indicating to stop transmitting
 80002a8:	2d24      	cmp	r5, #36	; 0x24

	BEQ wait_for_button
 80002aa:	d0e7      	beq.n	800027c <wait_for_button>

	STRB R5, [R0, USART_TDR]
 80002ac:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28

	B tx_uart
 80002b0:	e7f4      	b.n	800029c <tx_uart>

080002b2 <part_b_main>:

part_b_main:

@ To read in data, we need to use a memory buffer to store the incoming bytes
	@ Get pointers to the buffer and counter memory areas
	LDR R1, =incoming_buffer
 80002b2:	493c      	ldr	r1, [pc, #240]	; (80003a4 <main+0x20>)
	LDR R7, =incoming_counter
 80002b4:	4f3c      	ldr	r7, [pc, #240]	; (80003a8 <main+0x24>)

	@ dereference the memory for the maximum buffer size, store it in R7
	LDRB R7, [R7]
 80002b6:	783f      	ldrb	r7, [r7, #0]

	@ Keep a pointer that counts how many bytes have been received
	MOV R8, #0x00
 80002b8:	f04f 0800 	mov.w	r8, #0

080002bc <rx_loop>:


rx_loop:

	LDR R0, =UART @ the base address for the register to set up UART
 80002bc:	4837      	ldr	r0, [pc, #220]	; (800039c <main+0x18>)
	LDR R2, [R0, USART_ISR] @ load the status of the UART
 80002be:	69c2      	ldr	r2, [r0, #28]

	TST R2, 1 << UART_ORE | 1 << UART_FE  @ 'AND' the current status with the bit mask that we are interested in
 80002c0:	f012 0f0a 	tst.w	r2, #10
						   @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	BNE clear_error
 80002c4:	d113      	bne.n	80002ee <clear_error>

	TST R2, 1 << UART_RXNE @ 'AND' the current status with the bit mask that we are interested in
 80002c6:	f012 0f20 	tst.w	r2, #32
							  @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	BEQ rx_loop @ loop back to check status again if the flag indicates there is no byte waiting
 80002ca:	d0f7      	beq.n	80002bc <rx_loop>

	LDRB R3, [R0, USART_RDR] @ load the lowest byte (RDR bits [0:7] for an 8 bit read)
 80002cc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24

	CMP R3, #0x24 @ check if the '$' symbol has been reached indicating to stop reading
 80002d0:	2b24      	cmp	r3, #36	; 0x24

	BEQ finish_loop
 80002d2:	d011      	beq.n	80002f8 <finish_loop>

	STRB R3, [R1, R8]
 80002d4:	f801 3008 	strb.w	r3, [r1, r8]
	ADD R8, #1
 80002d8:	f108 0801 	add.w	r8, r8, #1

	CMP R7, R8
 80002dc:	4547      	cmp	r7, r8
	BGT no_reset
 80002de:	dc01      	bgt.n	80002e4 <no_reset>
	MOV R8, #0
 80002e0:	f04f 0800 	mov.w	r8, #0

080002e4 <no_reset>:


no_reset:

	@ load the status of the UART
	LDR R2, [R0, USART_RQR]
 80002e4:	6982      	ldr	r2, [r0, #24]
	ORR R2, 1 << UART_RXFRQ
 80002e6:	f042 0208 	orr.w	r2, r2, #8
	STR R2, [R0, USART_RQR]
 80002ea:	6182      	str	r2, [r0, #24]

	BGT rx_loop
 80002ec:	dce6      	bgt.n	80002bc <rx_loop>

080002ee <clear_error>:


clear_error:

	@ Clear the overrun/frame error flag in the register USART_ICR (see page 897)
	LDR R2, [R0, USART_ICR]
 80002ee:	6a02      	ldr	r2, [r0, #32]
	ORR R2, 1 << UART_ORECF | 1 << UART_FECF @ clear the flags (by setting flags to 1)
 80002f0:	f042 0208 	orr.w	r2, r2, #8
	STR R2, [R0, USART_ICR]
 80002f4:	6202      	str	r2, [r0, #32]
	B rx_loop
 80002f6:	e7e1      	b.n	80002bc <rx_loop>

080002f8 <finish_loop>:


finish_loop:

	B finish_loop
 80002f8:	e7fe      	b.n	80002f8 <finish_loop>

080002fa <part_c_main>:


part_c_main:

	@ change the clock to PLL and set to 48 MHz (6x speed)
	BL change_clock_speed
 80002fa:	f7ff ff8d 	bl	8000218 <change_clock_speed>

	@ change baud rate value for the different clock speed
	MOV R1, #0x1A1 @ value calcualted for setting baud rate to 115200
 80002fe:	f240 11a1 	movw	r1, #417	; 0x1a1
	LDR R0, =UART
 8000302:	4826      	ldr	r0, [pc, #152]	; (800039c <main+0x18>)
	STRH R1, [R0, #USART_BRR]
 8000304:	8181      	strh	r1, [r0, #12]

	@ branch to 3a (transmitting with button) with the new clock speed
	B part_a_main
 8000306:	e7b7      	b.n	8000278 <part_a_main>

08000308 <part_d_main>:
.text


part_d_main:

	LDR R1, =incoming_buffer
 8000308:	4926      	ldr	r1, [pc, #152]	; (80003a4 <main+0x20>)
	LDR R7, =incoming_counter
 800030a:	4f27      	ldr	r7, [pc, #156]	; (80003a8 <main+0x24>)

	@ dereference the memory for the maximum buffer size, store it in R7
	LDRB R7, [R7]
 800030c:	783f      	ldrb	r7, [r7, #0]

	@ Keep a pointer that counts how many bytes have been received
	MOV R8, #0x00
 800030e:	f04f 0800 	mov.w	r8, #0

08000312 <read_loop>:


read_loop:

	LDR R0, =UART @ the base address for the register to set up UART
 8000312:	4822      	ldr	r0, [pc, #136]	; (800039c <main+0x18>)
	LDR R2, [R0, USART_ISR] @ load the status of the UART
 8000314:	69c2      	ldr	r2, [r0, #28]

	TST R2, 1 << UART_ORE | 1 << UART_FE  @ 'AND' the current status with the bit mask that we are interested in
 8000316:	f012 0f0a 	tst.w	r2, #10
						   @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	BNE clear_error_d
 800031a:	d113      	bne.n	8000344 <clear_error_d>

	TST R2, 1 << UART_RXNE @ 'AND' the current status with the bit mask that we are interested in
 800031c:	f012 0f20 	tst.w	r2, #32
							  @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	BEQ read_loop @ loop back to check status again if the flag indicates there is no byte waiting
 8000320:	d0f7      	beq.n	8000312 <read_loop>

	LDRB R3, [R0, USART_RDR] @ load the lowest byte (RDR bits [0:7] for an 8 bit read)
 8000322:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
	STRB R3, [R1, R8]
 8000326:	f801 3008 	strb.w	r3, [r1, r8]
	ADD R8, #1
 800032a:	f108 0801 	add.w	r8, r8, #1

	CMP R3, #0x24 @ check if the '$' symbol has been reached indicating to stop reading
 800032e:	2b24      	cmp	r3, #36	; 0x24
	BEQ transmit_loop
 8000330:	d00d      	beq.n	800034e <transmit_loop>

	CMP R7, R8
 8000332:	4547      	cmp	r7, r8
	BGT no_reset_d
 8000334:	dc01      	bgt.n	800033a <no_reset_d>
	MOV R8, #0
 8000336:	f04f 0800 	mov.w	r8, #0

0800033a <no_reset_d>:


no_reset_d:

	@ load the status of the UART
	LDR R2, [R0, USART_RQR]
 800033a:	6982      	ldr	r2, [r0, #24]
	ORR R2, 1 << UART_RXFRQ
 800033c:	f042 0208 	orr.w	r2, r2, #8
	STR R2, [R0, USART_RQR]
 8000340:	6182      	str	r2, [r0, #24]

	BGT read_loop
 8000342:	dce6      	bgt.n	8000312 <read_loop>

08000344 <clear_error_d>:


clear_error_d:

	@ Clear the overrun/frame error flag in the register USART_ICR (see page 897)
	LDR R2, [R0, USART_ICR]
 8000344:	6a02      	ldr	r2, [r0, #32]
	ORR R2, 1 << UART_ORECF | 1 << UART_FECF @ clear the flags (by setting flags to 1)
 8000346:	f042 0208 	orr.w	r2, r2, #8
	STR R2, [R0, USART_ICR]
 800034a:	6202      	str	r2, [r0, #32]
	B read_loop
 800034c:	e7e1      	b.n	8000312 <read_loop>

0800034e <transmit_loop>:
*/


transmit_loop:

	BL wait_for_isr
 800034e:	f000 f807 	bl	8000360 <wait_for_isr>

	@ load the next value in the string into the transmit buffer for the specified UART
	LDRB R5, [R1], #1
 8000352:	f811 5b01 	ldrb.w	r5, [r1], #1

	CMP R5, #0x24 @ check if the '$' symbol has been reached indicating to stop transmitting
 8000356:	2d24      	cmp	r5, #36	; 0x24

	BEQ finish_transmit
 8000358:	d007      	beq.n	800036a <finish_transmit>

	STRB R5, [R0, USART_TDR]
 800035a:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28

	B transmit_loop
 800035e:	e7f6      	b.n	800034e <transmit_loop>

08000360 <wait_for_isr>:


wait_for_isr:
	LDR R3, [R0, USART_ISR] @ load the status of the UART
 8000360:	69c3      	ldr	r3, [r0, #28]
	ANDS R3, 1 << UART_TXE  @ 'AND' the current status with the bit mask that we are interested in
 8000362:	f013 0380 	ands.w	r3, r3, #128	; 0x80
						    @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	@ loop back to check status again if the flag indicates there is no byte waiting
	BEQ wait_for_isr
 8000366:	d0fb      	beq.n	8000360 <wait_for_isr>

	BX LR
 8000368:	4770      	bx	lr

0800036a <finish_transmit>:


finish_transmit:

	@ transmit carriage return and newline, then start reading again
	BL wait_for_isr
 800036a:	f7ff fff9 	bl	8000360 <wait_for_isr>

	MOV R5, #0x0D
 800036e:	f04f 050d 	mov.w	r5, #13
	STRB R5, [R0, USART_TDR]
 8000372:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28

	BL wait_for_isr
 8000376:	f7ff fff3 	bl	8000360 <wait_for_isr>

	MOV R5, #0x0A
 800037a:	f04f 050a 	mov.w	r5, #10
	STRB R5, [R0, USART_TDR]
 800037e:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28

	B part_d_main
 8000382:	e7c1      	b.n	8000308 <part_d_main>

08000384 <main>:


@ this is the entry function called from the c file
main:

	BL initialise_power
 8000384:	f7ff ff6e 	bl	8000264 <initialise_power>
	BL enable_peripheral_clocks
 8000388:	f7ff ff24 	bl	80001d4 <enable_peripheral_clocks>
	BL enable_uart
 800038c:	f7ff ff28 	bl	80001e0 <enable_uart>

	@ B part_b_main @ (read)

	@ B part_c_main @ (change clock)

	B part_d_main @ (transmit and read)
 8000390:	e7ba      	b.n	8000308 <part_d_main>
 8000392:	0000      	.short	0x0000
	LDR R0, =RCC
 8000394:	40021000 	.word	0x40021000
	LDR R0, =GPIOC
 8000398:	48000800 	.word	0x48000800
	LDR R0, =UART @ the base address for the register to turn clocks on/off
 800039c:	40013800 	.word	0x40013800
	LDR R1, =tx_string
 80003a0:	20000000 	.word	0x20000000
	LDR R1, =incoming_buffer
 80003a4:	20000018 	.word	0x20000018
	LDR R7, =incoming_counter
 80003a8:	20000056 	.word	0x20000056

080003ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003ac:	480d      	ldr	r0, [pc, #52]	; (80003e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b4:	480c      	ldr	r0, [pc, #48]	; (80003e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b6:	490d      	ldr	r1, [pc, #52]	; (80003ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b8:	4a0d      	ldr	r2, [pc, #52]	; (80003f0 <LoopForever+0xe>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003bc:	e002      	b.n	80003c4 <LoopCopyDataInit>

080003be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c2:	3304      	adds	r3, #4

080003c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c8:	d3f9      	bcc.n	80003be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ca:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003cc:	4c0a      	ldr	r4, [pc, #40]	; (80003f8 <LoopForever+0x16>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d0:	e001      	b.n	80003d6 <LoopFillZerobss>

080003d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d4:	3204      	adds	r2, #4

080003d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d8:	d3fb      	bcc.n	80003d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003da:	f000 f811 	bl	8000400 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003de:	f7ff ffd1 	bl	8000384 <main>

080003e2 <LoopForever>:

LoopForever:
  b LoopForever
 80003e2:	e7fe      	b.n	80003e2 <LoopForever>
  ldr   r0, =_estack
 80003e4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80003e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ec:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80003f0:	08000468 	.word	0x08000468
  ldr r2, =_sbss
 80003f4:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80003f8:	20000074 	.word	0x20000074

080003fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003fc:	e7fe      	b.n	80003fc <ADC1_2_IRQHandler>
	...

08000400 <__libc_init_array>:
 8000400:	b570      	push	{r4, r5, r6, lr}
 8000402:	4d0d      	ldr	r5, [pc, #52]	; (8000438 <__libc_init_array+0x38>)
 8000404:	4c0d      	ldr	r4, [pc, #52]	; (800043c <__libc_init_array+0x3c>)
 8000406:	1b64      	subs	r4, r4, r5
 8000408:	10a4      	asrs	r4, r4, #2
 800040a:	2600      	movs	r6, #0
 800040c:	42a6      	cmp	r6, r4
 800040e:	d109      	bne.n	8000424 <__libc_init_array+0x24>
 8000410:	4d0b      	ldr	r5, [pc, #44]	; (8000440 <__libc_init_array+0x40>)
 8000412:	4c0c      	ldr	r4, [pc, #48]	; (8000444 <__libc_init_array+0x44>)
 8000414:	f000 f818 	bl	8000448 <_init>
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	10a4      	asrs	r4, r4, #2
 800041c:	2600      	movs	r6, #0
 800041e:	42a6      	cmp	r6, r4
 8000420:	d105      	bne.n	800042e <__libc_init_array+0x2e>
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f855 3b04 	ldr.w	r3, [r5], #4
 8000428:	4798      	blx	r3
 800042a:	3601      	adds	r6, #1
 800042c:	e7ee      	b.n	800040c <__libc_init_array+0xc>
 800042e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000432:	4798      	blx	r3
 8000434:	3601      	adds	r6, #1
 8000436:	e7f2      	b.n	800041e <__libc_init_array+0x1e>
 8000438:	08000460 	.word	0x08000460
 800043c:	08000460 	.word	0x08000460
 8000440:	08000460 	.word	0x08000460
 8000444:	08000464 	.word	0x08000464

08000448 <_init>:
 8000448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044a:	bf00      	nop
 800044c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044e:	bc08      	pop	{r3}
 8000450:	469e      	mov	lr, r3
 8000452:	4770      	bx	lr

08000454 <_fini>:
 8000454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000456:	bf00      	nop
 8000458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045a:	bc08      	pop	{r3}
 800045c:	469e      	mov	lr, r3
 800045e:	4770      	bx	lr
