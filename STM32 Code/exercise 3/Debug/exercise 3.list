
exercise 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002dc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000470  08000470  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000470  08000470  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08000470  08000470  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000470  08000470  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000470  08000470  00010470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000474  08000474  00010474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08000478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020054  2**0
                  CONTENTS
 10 .bss          0000001c  20000054  20000054  00020054  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000070  20000070  00020054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 14 .debug_line   000001bf  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000bf  00000000  00000000  00020286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000048  00000000  00000000  00020345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  0002038d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  000203b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000000a7  00000000  00000000  00020400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  000204a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  000204c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000054 	.word	0x20000054
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000458 	.word	0x08000458

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000058 	.word	0x20000058
 80001d0:	08000458 	.word	0x08000458

080001d4 <enable_peripheral_clocks>:

@ enable peripheral clocks for A-E
enable_peripheral_clocks:

	@ load the address of the RCC address boundary (for enabling the IO clock)
	LDR R0, =RCC
 80001d4:	4870      	ldr	r0, [pc, #448]	; (8000398 <main+0x10>)

	@ enable all of the GPIO peripherals in AHBENR
	LDR R1, [R0, #AHBENR]
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOE_ENABLE | 1 << GPIOD_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOB_ENABLE | 1 << GPIOA_ENABLE
 80001d8:	f441 1178 	orr.w	r1, r1, #4063232	; 0x3e0000
	STR R1, [R0, #AHBENR]
 80001dc:	6141      	str	r1, [r0, #20]

	BX LR
 80001de:	4770      	bx	lr

080001e0 <enable_uart>:

enable_uart:
	@ enable USART1 and UART4
	@ UART1 uses pc4 and pc5, UART4 uses pc10 and pc11

	LDR R0, =GPIOC
 80001e0:	486e      	ldr	r0, [pc, #440]	; (800039c <main+0x14>)

	@ set AF7 for pc4 & pc5
	LDR R1, =0x77
 80001e2:	f04f 0177 	mov.w	r1, #119	; 0x77
	STRB R1, [R0, AFRL + 2]
 80001e6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22

	@ set AF5 for pc10 & pc11
	LDR R1, =0x55
 80001ea:	f04f 0155 	mov.w	r1, #85	; 0x55
	STRB R1, [R0, AFRH + 1]
 80001ee:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25

	@ modify pins 4,5,10,11 for alternate function mode
	LDR R1, [R0, GPIO_MODER]
 80001f2:	6801      	ldr	r1, [r0, #0]
	LDR R2, =0xA00A00
 80001f4:	4a6a      	ldr	r2, [pc, #424]	; (80003a0 <main+0x18>)
	ORR R1, R2 @ Mask for pins to change to 'alternate function mode'
 80001f6:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, GPIO_MODER]
 80001fa:	6001      	str	r1, [r0, #0]

	@ set high speed for pins 4,5,10,11
	LDR R1, [R0, GPIO_OSPEEDR]
 80001fc:	6881      	ldr	r1, [r0, #8]
	LDR R2, =0xF00F00
 80001fe:	4a69      	ldr	r2, [pc, #420]	; (80003a4 <main+0x1c>)
	ORR R1, R2 @ mask for pins to be set as high speed
 8000200:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, GPIO_OSPEEDR]
 8000204:	6081      	str	r1, [r0, #8]

	@ set USART1 enable bit
	LDR R0, =RCC 			@ the base address for the register to turn clocks on/off
 8000206:	4864      	ldr	r0, [pc, #400]	; (8000398 <main+0x10>)
	LDR R1, [R0, #APB2ENR]	@ load the original value from the enable register
 8000208:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << USART1_EN	@ apply the bit mask to the previous values of the enable the UART
 800020a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
	STR R1, [R0, #APB2ENR]	@ store the modified enable register values back to RCC
 800020e:	6181      	str	r1, [r0, #24]

	@ set UART4 enable bit
	LDR R1, [R0, #APB1ENR]
 8000210:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << UART4_EN
 8000212:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
	STR R1, [R0, #APB1ENR]
 8000216:	61c1      	str	r1, [r0, #28]

	@ set the baud rate (115200)
	MOV R1, #0x46				@ calculated value using the base speed of 8MHz
 8000218:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =USART1 			@ USART1 base address
 800021c:	4862      	ldr	r0, [pc, #392]	; (80003a8 <main+0x20>)
	STRH R1, [R0, #USART_BRR]
 800021e:	8181      	strh	r1, [r0, #12]
	LDR R0, =UART4				@ UART4 base address
 8000220:	4862      	ldr	r0, [pc, #392]	; (80003ac <main+0x24>)
	STRH R1, [R0, #USART_BRR]
 8000222:	8181      	strh	r1, [r0, #12]

	@ enable USART1 transmitting and receiving
	LDR R0, =USART1
 8000224:	4860      	ldr	r0, [pc, #384]	; (80003a8 <main+0x20>)
	LDR R1, [R0, #USART_CR1]
 8000226:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE
 8000228:	f041 010d 	orr.w	r1, r1, #13
	STR R1, [R0, #USART_CR1]
 800022c:	6001      	str	r1, [r0, #0]

	@ enable UART4 transmitting and receiving
	LDR R0, =UART4
 800022e:	485f      	ldr	r0, [pc, #380]	; (80003ac <main+0x24>)
	LDR R1, [R0, #USART_CR1]
 8000230:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE
 8000232:	f041 010d 	orr.w	r1, r1, #13
	STR R1, [R0, #USART_CR1]
 8000236:	6001      	str	r1, [r0, #0]

	BX LR @ return
 8000238:	4770      	bx	lr

0800023a <change_clock_speed>:


change_clock_speed:
	@ switch to HSE (high speed external clock) so PLL can be used (multiplies frequency)

	LDR R0, =RCC
 800023a:	4857      	ldr	r0, [pc, #348]	; (8000398 <main+0x10>)
	LDR R1, [R0, #RCC_CR]
 800023c:	6801      	ldr	r1, [r0, #0]
	LDR R2, =1 << HSEBYP | 1 << HSEON @ bits that enable HSE
 800023e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
	ORR R1, R2
 8000242:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CR]
 8000246:	6001      	str	r1, [r0, #0]

08000248 <wait_for_HSERDY>:

	@ wait until HSE is ready
wait_for_HSERDY:
	LDR R1, [R0, #RCC_CR]	@ load clock control register
 8000248:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << HSERDY		@ check if HSE is ready
 800024a:	f411 3f00 	tst.w	r1, #131072	; 0x20000
	BEQ wait_for_HSERDY
 800024e:	d0fb      	beq.n	8000248 <wait_for_HSERDY>

	@ can now switch to PLL

	LDR R1, [R0, #RCC_CFGR] 					@ load clock configure register
 8000250:	6841      	ldr	r1, [r0, #4]
	LDR R2, =1 << 20 | 1 << PLLSRC | 1 << 22	@ the last term is for the USB prescaler to be 1
 8000252:	f44f 02a2 	mov.w	r2, #5308416	; 0x510000
	ORR R1, R2  								@ multiplies speed by 6
 8000256:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CFGR] 					@ store the modified enable register values back to RCC
 800025a:	6041      	str	r1, [r0, #4]

	@ enable PLL
	LDR R0, =RCC
 800025c:	484e      	ldr	r0, [pc, #312]	; (8000398 <main+0x10>)
	LDR R1, [R0, #RCC_CR]	@ load the original value from the enable register
 800025e:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << PLLON		@ apply the bit mask to turn on the PLL
 8000260:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
	STR R1, [R0, #RCC_CR]	@ store the modified enable register values back to RCC
 8000264:	6001      	str	r1, [r0, #0]

08000266 <wait_for_PLLRDY>:

@ wait for PLL to be ready
wait_for_PLLRDY:
	LDR R1, [R0, #RCC_CR]	@ load the original value from the enable register
 8000266:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << PLLRDY		@ test the HSERDY bit (check if it is 1)
 8000268:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
	BEQ wait_for_PLLRDY
 800026c:	d0fb      	beq.n	8000266 <wait_for_PLLRDY>

@ switch system clock to PLL
	LDR R0, =RCC
 800026e:	484a      	ldr	r0, [pc, #296]	; (8000398 <main+0x10>)
	LDR R1, [R0, #RCC_CFGR]		@ load the current value of the peripheral clock registers
 8000270:	6841      	ldr	r1, [r0, #4]
	MOV R2, 1 << 10 | 1 << 1	@ bit 1 (SW = 10)  - PLL set as system clock
 8000272:	f240 4202 	movw	r2, #1026	; 0x402
								@ bit 10 (HCLK=100) divide APB1 by 2
	ORR R1, R2
 8000276:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CFGR] 	@ store the modified register back to the submodule
 800027a:	6041      	str	r1, [r0, #4]

	LDR R1, [R0, #RCC_CFGR]		@ load the current value of the peripheral clock registers
 800027c:	6841      	ldr	r1, [r0, #4]
	ORR R1, 1 << USBPRE			@ set the USB prescaler (when PLL is on for the USB)
 800027e:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
	STR R1, [R0, #RCC_CFGR]		@ store the modified register back to the submodule
 8000282:	6041      	str	r1, [r0, #4]

	BX LR @ return
 8000284:	4770      	bx	lr

08000286 <initialise_power>:

@ initialise the power systems on the microcontroller
@ PWREN (enable power to the clock), SYSCFGEN system clock enable
initialise_power:

	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000286:	4844      	ldr	r0, [pc, #272]	; (8000398 <main+0x10>)

	@ enable clock power in APB1ENR
	LDR R1, [R0, #APB1ENR]
 8000288:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN @ apply the bit mask for power enable
 800028a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
	STR R1, [R0, #APB1ENR]
 800028e:	61c1      	str	r1, [r0, #28]

	@ enable clock config in APB2ENR
	LDR R1, [R0, #APB2ENR]
 8000290:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN @ apply the bit mask to allow clock configuration
 8000292:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR]
 8000296:	6181      	str	r1, [r0, #24]

	BX LR @ return
 8000298:	4770      	bx	lr

0800029a <part_a_main>:
.text


part_a_main:

	LDR R0, =USART1	@ load UART
 800029a:	4843      	ldr	r0, [pc, #268]	; (80003a8 <main+0x20>)
	MOV R2, #0		@ flag for if button was pressed on the previous check
 800029c:	f04f 0200 	mov.w	r2, #0

	B wait_for_button
 80002a0:	e7ff      	b.n	80002a2 <wait_for_button>

080002a2 <wait_for_button>:


wait_for_button:

	@ load the button input data and check if it is 1
	LDR R3, =GPIOA
 80002a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
	LDR R4, [R3, IDR]
 80002a6:	691c      	ldr	r4, [r3, #16]
	AND R4, 1 @ get the first bit in the IDR (button signal)
 80002a8:	f004 0401 	and.w	r4, r4, #1
	CMP R4, 1
 80002ac:	2c01      	cmp	r4, #1
	BEQ button_pressed
 80002ae:	d002      	beq.n	80002b6 <button_pressed>

	MOV R2, #0
 80002b0:	f04f 0200 	mov.w	r2, #0

	B wait_for_button
 80002b4:	e7f5      	b.n	80002a2 <wait_for_button>

080002b6 <button_pressed>:


button_pressed:

	@ check if button was pressed on the previous check
	CMP R2, 1
 80002b6:	2a01      	cmp	r2, #1
	BEQ wait_for_button
 80002b8:	d0f3      	beq.n	80002a2 <wait_for_button>

	LDR R1, =tx_string	@ string to transmit
 80002ba:	493d      	ldr	r1, [pc, #244]	; (80003b0 <main+0x28>)
	MOV R2, #1
 80002bc:	f04f 0201 	mov.w	r2, #1

	@ start transmitting, and wait for button again when finished
	BL return_after_tx
 80002c0:	f000 f801 	bl	80002c6 <return_after_tx>
	B wait_for_button
 80002c4:	e7ed      	b.n	80002a2 <wait_for_button>

080002c6 <return_after_tx>:


return_after_tx:

	@ store where to return to so it doesn't get overwritten
	MOV R6, LR
 80002c6:	4676      	mov	r6, lr

	B tx_loop
 80002c8:	e7ff      	b.n	80002ca <tx_loop>

080002ca <tx_loop>:


tx_loop:

	@ wait until ready to transmit
	BL wait_for_ISR
 80002ca:	f000 f807 	bl	80002dc <wait_for_ISR>

	@ load the current byte
	LDRB R5, [R1], #1
 80002ce:	f811 5b01 	ldrb.w	r5, [r1], #1
	STRB R5, [R0, USART_TDR]
 80002d2:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28

	@ check for carriage return (enter key), indicating to stop transmitting
	CMP R5, #0x0D
 80002d6:	2d0d      	cmp	r5, #13
	BNE tx_loop
 80002d8:	d1f7      	bne.n	80002ca <tx_loop>

	B finish_transmit
 80002da:	e004      	b.n	80002e6 <finish_transmit>

080002dc <wait_for_ISR>:


wait_for_ISR:

	LDR R3, [R0, USART_ISR]
 80002dc:	69c3      	ldr	r3, [r0, #28]
	ANDS R3, 1 << UART_TXE
 80002de:	f013 0380 	ands.w	r3, r3, #128	; 0x80
	BEQ wait_for_ISR
 80002e2:	d0fb      	beq.n	80002dc <wait_for_ISR>

	BX LR
 80002e4:	4770      	bx	lr

080002e6 <finish_transmit>:


finish_transmit:

	BL wait_for_ISR
 80002e6:	f7ff fff9 	bl	80002dc <wait_for_ISR>

	@ transmit a newline character
	MOV R5, #0x0A
 80002ea:	f04f 050a 	mov.w	r5, #10
	STRB R5, [R0, USART_TDR]
 80002ee:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28

	BX R6
 80002f2:	4730      	bx	r6

080002f4 <part_b_main>:


part_b_main:

	@ Get pointers to the buffer and buffer size
	LDR R1, =incoming_buffer
 80002f4:	492f      	ldr	r1, [pc, #188]	; (80003b4 <main+0x2c>)
	LDR R7, =buffer_size
 80002f6:	4f30      	ldr	r7, [pc, #192]	; (80003b8 <main+0x30>)
	LDRB R7, [R7]	@ de-reference R7
 80002f8:	783f      	ldrb	r7, [r7, #0]
	MOV R8, #0x00	@ counter for how many letters received
 80002fa:	f04f 0800 	mov.w	r8, #0
	LDR R0, =USART1	@ load USART1
 80002fe:	482a      	ldr	r0, [pc, #168]	; (80003a8 <main+0x20>)

	@ start reading
	BL rx_loop
 8000300:	f000 f801 	bl	8000306 <rx_loop>

	@ enter infinite loop when finished
	B finish_loop
 8000304:	e01d      	b.n	8000342 <finish_loop>

08000306 <rx_loop>:


rx_loop:

	@ load UART status register
	LDR R2, [R0, USART_ISR]
 8000306:	69c2      	ldr	r2, [r0, #28]

	@ check for overrun or frame errors
	TST R2, 1 << UART_ORE | 1 << UART_FE
 8000308:	f012 0f0a 	tst.w	r2, #10
	BNE clear_error
 800030c:	d113      	bne.n	8000336 <clear_error>

	@ check if there is a byte ready to read
	TST R2, 1 << UART_RXNE
 800030e:	f012 0f20 	tst.w	r2, #32
	BEQ rx_loop
 8000312:	d0f8      	beq.n	8000306 <rx_loop>

	@ store byte in the buffer and increment buffer position
	LDRB R3, [R0, USART_RDR]
 8000314:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
	STRB R3, [R1, R8]
 8000318:	f801 3008 	strb.w	r3, [r1, r8]
	ADD R8, #1
 800031c:	f108 0801 	add.w	r8, r8, #1

	@ load current byte, check for carriage return (enter key)
	CMP R3, #0x0D
 8000320:	2b0d      	cmp	r3, #13
	BEQ finish_read
 8000322:	d00d      	beq.n	8000340 <finish_read>

	@ check if transmission exceeds buffer size
	CMP R7, R8
 8000324:	4547      	cmp	r7, r8
	BGT no_reset
 8000326:	dc01      	bgt.n	800032c <no_reset>
	MOV R8, #0 @ reset the buffer position
 8000328:	f04f 0800 	mov.w	r8, #0

0800032c <no_reset>:


no_reset:

	@ refreshes the RXNE flag (prevents overrun error)
	LDR R2, [R0, USART_RQR]
 800032c:	6982      	ldr	r2, [r0, #24]
	ORR R2, 1 << UART_RXFRQ
 800032e:	f042 0208 	orr.w	r2, r2, #8
	STR R2, [R0, USART_RQR]
 8000332:	6182      	str	r2, [r0, #24]

	BGT rx_loop
 8000334:	dce7      	bgt.n	8000306 <rx_loop>

08000336 <clear_error>:


clear_error:

	@ Clear the overrun/frame error flags by setting them to 1
	LDR R2, [R0, USART_ICR]
 8000336:	6a02      	ldr	r2, [r0, #32]
	ORR R2, 1 << UART_ORECF | 1 << UART_FECF
 8000338:	f042 020a 	orr.w	r2, r2, #10
	STR R2, [R0, USART_ICR]
 800033c:	6202      	str	r2, [r0, #32]

	B rx_loop
 800033e:	e7e2      	b.n	8000306 <rx_loop>

08000340 <finish_read>:


finish_read:

	BX LR
 8000340:	4770      	bx	lr

08000342 <finish_loop>:


finish_loop:

	B finish_loop
 8000342:	e7fe      	b.n	8000342 <finish_loop>

08000344 <part_c_main>:


part_c_main:

	@ change the clock to PLL and set to 48 MHz (6x speed)
	BL change_clock_speed
 8000344:	f7ff ff79 	bl	800023a <change_clock_speed>

	@ change baud rate value for the different clock speed
	MOV R1, #0x1A1 @ value calculated for setting baud rate to 115200
 8000348:	f240 11a1 	movw	r1, #417	; 0x1a1
	LDR R0, =USART1
 800034c:	4816      	ldr	r0, [pc, #88]	; (80003a8 <main+0x20>)
	STRH R1, [R0, #USART_BRR]
 800034e:	8181      	strh	r1, [r0, #12]

	@ branch to 3a (transmitting with button) with the new clock speed
	B part_a_main
 8000350:	e7a3      	b.n	800029a <part_a_main>

08000352 <part_d_main>:


part_d_main:

	@ Get pointers to the buffer and buffer size (62)
	LDR R1, =incoming_buffer
 8000352:	4918      	ldr	r1, [pc, #96]	; (80003b4 <main+0x2c>)
	LDR R7, =buffer_size
 8000354:	4f18      	ldr	r7, [pc, #96]	; (80003b8 <main+0x30>)
	LDRB R7, [R7]	@ de-reference R7
 8000356:	783f      	ldrb	r7, [r7, #0]
	MOV R8, #0x00	@ counter for how many letters received
 8000358:	f04f 0800 	mov.w	r8, #0
	LDR R0, =USART1	@ load USART1
 800035c:	4812      	ldr	r0, [pc, #72]	; (80003a8 <main+0x20>)

	@ branch to the read function (in 3b.s)
	BL rx_loop
 800035e:	f7ff ffd2 	bl	8000306 <rx_loop>

	@ branch to the transmit function (in 3a.s)
	BL return_after_tx
 8000362:	f7ff ffb0 	bl	80002c6 <return_after_tx>

	B part_d_main
 8000366:	e7f4      	b.n	8000352 <part_d_main>

08000368 <part_e_main>:


part_e_main:

	@ Get pointers to the buffer and buffer size (62)
	LDR R1, =incoming_buffer
 8000368:	4912      	ldr	r1, [pc, #72]	; (80003b4 <main+0x2c>)
	LDR R7, =buffer_size
 800036a:	4f13      	ldr	r7, [pc, #76]	; (80003b8 <main+0x30>)
	LDRB R7, [R7]	@ de-reference R7
 800036c:	783f      	ldrb	r7, [r7, #0]
	MOV R8, #0x00	@ counter for how many letters received
 800036e:	f04f 0800 	mov.w	r8, #0

	@ comment out for transmitting or receiving

	B transmitting
 8000372:	e7ff      	b.n	8000374 <transmitting>

08000374 <transmitting>:
	@ B receiving


transmitting:

	LDR R0, =USART1	@ load USART1
 8000374:	480c      	ldr	r0, [pc, #48]	; (80003a8 <main+0x20>)

	@ read in characters from the command line
	BL rx_loop
 8000376:	f7ff ffc6 	bl	8000306 <rx_loop>

	@ transmit characters
	BL return_after_tx
 800037a:	f7ff ffa4 	bl	80002c6 <return_after_tx>

	B part_e_main
 800037e:	e7f3      	b.n	8000368 <part_e_main>

08000380 <receiving>:


receiving:

	LDR R0, =UART4	@ load UART4
 8000380:	480a      	ldr	r0, [pc, #40]	; (80003ac <main+0x24>)

	@ read in characters
	BL rx_loop
 8000382:	f7ff ffc0 	bl	8000306 <rx_loop>

	B part_e_main
 8000386:	e7ef      	b.n	8000368 <part_e_main>

08000388 <main>:


main:

	@ functions for set up
	BL initialise_power
 8000388:	f7ff ff7d 	bl	8000286 <initialise_power>
	BL enable_peripheral_clocks
 800038c:	f7ff ff22 	bl	80001d4 <enable_peripheral_clocks>
	BL enable_uart
 8000390:	f7ff ff26 	bl	80001e0 <enable_uart>

	@ B part_c_main @ (change clock)

	@ B part_d_main @ (transmit and read)

	B part_e_main @ (transmit via USART1 and read with UART4)
 8000394:	e7e8      	b.n	8000368 <part_e_main>
 8000396:	0000      	.short	0x0000
	LDR R0, =RCC
 8000398:	40021000 	.word	0x40021000
	LDR R0, =GPIOC
 800039c:	48000800 	.word	0x48000800
	LDR R2, =0xA00A00
 80003a0:	00a00a00 	.word	0x00a00a00
	LDR R2, =0xF00F00
 80003a4:	00f00f00 	.word	0x00f00f00
	LDR R0, =USART1 			@ USART1 base address
 80003a8:	40013800 	.word	0x40013800
	LDR R0, =UART4				@ UART4 base address
 80003ac:	40004c00 	.word	0x40004c00
	LDR R1, =tx_string	@ string to transmit
 80003b0:	20000000 	.word	0x20000000
	LDR R1, =incoming_buffer
 80003b4:	20000014 	.word	0x20000014
	LDR R7, =buffer_size
 80003b8:	20000052 	.word	0x20000052

080003bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003bc:	480d      	ldr	r0, [pc, #52]	; (80003f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c4:	480c      	ldr	r0, [pc, #48]	; (80003f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003c6:	490d      	ldr	r1, [pc, #52]	; (80003fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c8:	4a0d      	ldr	r2, [pc, #52]	; (8000400 <LoopForever+0xe>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003cc:	e002      	b.n	80003d4 <LoopCopyDataInit>

080003ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d2:	3304      	adds	r3, #4

080003d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d8:	d3f9      	bcc.n	80003ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003da:	4a0a      	ldr	r2, [pc, #40]	; (8000404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003dc:	4c0a      	ldr	r4, [pc, #40]	; (8000408 <LoopForever+0x16>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e0:	e001      	b.n	80003e6 <LoopFillZerobss>

080003e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e4:	3204      	adds	r2, #4

080003e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e8:	d3fb      	bcc.n	80003e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ea:	f000 f811 	bl	8000410 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ee:	f7ff ffcb 	bl	8000388 <main>

080003f2 <LoopForever>:

LoopForever:
  b LoopForever
 80003f2:	e7fe      	b.n	80003f2 <LoopForever>
  ldr   r0, =_estack
 80003f4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80003f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003fc:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000400:	08000478 	.word	0x08000478
  ldr r2, =_sbss
 8000404:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000408:	20000070 	.word	0x20000070

0800040c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800040c:	e7fe      	b.n	800040c <ADC1_2_IRQHandler>
	...

08000410 <__libc_init_array>:
 8000410:	b570      	push	{r4, r5, r6, lr}
 8000412:	4d0d      	ldr	r5, [pc, #52]	; (8000448 <__libc_init_array+0x38>)
 8000414:	4c0d      	ldr	r4, [pc, #52]	; (800044c <__libc_init_array+0x3c>)
 8000416:	1b64      	subs	r4, r4, r5
 8000418:	10a4      	asrs	r4, r4, #2
 800041a:	2600      	movs	r6, #0
 800041c:	42a6      	cmp	r6, r4
 800041e:	d109      	bne.n	8000434 <__libc_init_array+0x24>
 8000420:	4d0b      	ldr	r5, [pc, #44]	; (8000450 <__libc_init_array+0x40>)
 8000422:	4c0c      	ldr	r4, [pc, #48]	; (8000454 <__libc_init_array+0x44>)
 8000424:	f000 f818 	bl	8000458 <_init>
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	10a4      	asrs	r4, r4, #2
 800042c:	2600      	movs	r6, #0
 800042e:	42a6      	cmp	r6, r4
 8000430:	d105      	bne.n	800043e <__libc_init_array+0x2e>
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f855 3b04 	ldr.w	r3, [r5], #4
 8000438:	4798      	blx	r3
 800043a:	3601      	adds	r6, #1
 800043c:	e7ee      	b.n	800041c <__libc_init_array+0xc>
 800043e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000442:	4798      	blx	r3
 8000444:	3601      	adds	r6, #1
 8000446:	e7f2      	b.n	800042e <__libc_init_array+0x1e>
 8000448:	08000470 	.word	0x08000470
 800044c:	08000470 	.word	0x08000470
 8000450:	08000470 	.word	0x08000470
 8000454:	08000474 	.word	0x08000474

08000458 <_init>:
 8000458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045a:	bf00      	nop
 800045c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045e:	bc08      	pop	{r3}
 8000460:	469e      	mov	lr, r3
 8000462:	4770      	bx	lr

08000464 <_fini>:
 8000464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000466:	bf00      	nop
 8000468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046a:	bc08      	pop	{r3}
 800046c:	469e      	mov	lr, r3
 800046e:	4770      	bx	lr
