
exercise 5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000304  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000498  08000498  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000498  08000498  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08000498  08000498  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000498  08000498  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000498  08000498  00010498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800049c  0800049c  0001049c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080004a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000001c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_line   000001ca  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000d4  00000000  00000000  00020299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000048  00000000  00000000  0002036d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  000203b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  000203e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000000a7  00000000  00000000  00020428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  000204cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  000204e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000005c 	.word	0x2000005c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000480 	.word	0x08000480

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000060 	.word	0x20000060
 80001d0:	08000480 	.word	0x08000480

080001d4 <enable_timer2_clock>:



enable_timer2_clock:

	LDR R0, =RCC			@ load the base address for the timer
 80001d4:	4878      	ldr	r0, [pc, #480]	; (80003b8 <finish_everything+0x4>)
	LDR R1, [R0, APB1ENR]	@ load the peripheral clock control register
 80001d6:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << TIM2EN 	@ store a 1 in bit for the TIM2 enable flag
 80001d8:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, APB1ENR] 	@ enable the timer
 80001dc:	61c1      	str	r1, [r0, #28]

	BX LR
 80001de:	4770      	bx	lr

080001e0 <enable_peripheral_clocks>:

@ enable peripheral clocks for A-E
enable_peripheral_clocks:

	@ load the address of the RCC address boundary (for enabling the IO clock)
	LDR R0, =RCC
 80001e0:	4875      	ldr	r0, [pc, #468]	; (80003b8 <finish_everything+0x4>)

	@ enable all of the GPIO peripherals in AHBENR
	LDR R1, [R0, #AHBENR]
 80001e2:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOE_ENABLE | 1 << GPIOD_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOB_ENABLE | 1 << GPIOA_ENABLE
 80001e4:	f441 1178 	orr.w	r1, r1, #4063232	; 0x3e0000
	STR R1, [R0, #AHBENR]
 80001e8:	6141      	str	r1, [r0, #20]

	BX LR
 80001ea:	4770      	bx	lr

080001ec <initialise_discovery_board>:


@ initialise discovery board outputs
initialise_discovery_board:
	LDR R0, =GPIOE	@ load the address of the GPIOE register into R0
 80001ec:	4873      	ldr	r0, [pc, #460]	; (80003bc <finish_everything+0x8>)
	LDR R1, =0x5555 @ set LED pins as outputs
 80001ee:	f245 5155 	movw	r1, #21845	; 0x5555
	STRH R1, [R0, #GPIO_MODER + 2]
 80001f2:	8041      	strh	r1, [r0, #2]

	BX LR
 80001f4:	4770      	bx	lr

080001f6 <enable_uart>:

enable_uart:
	@ enable USART1 and UART4
	@ UART1 uses pc4 and pc5, UART4 uses pc10 and pc11

	LDR R0, =GPIOC
 80001f6:	4872      	ldr	r0, [pc, #456]	; (80003c0 <finish_everything+0xc>)

	@ set AF7 for pc4 & pc5
	LDR R1, =0x77
 80001f8:	f04f 0177 	mov.w	r1, #119	; 0x77
	STRB R1, [R0, AFRL + 2]
 80001fc:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22

	@ set AF5 for pc10 & pc11
	LDR R1, =0x55
 8000200:	f04f 0155 	mov.w	r1, #85	; 0x55
	STRB R1, [R0, AFRH + 1]
 8000204:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25

	@ modify pins 4,5,10,11 for alternate function mode
	LDR R1, [R0, GPIO_MODER]
 8000208:	6801      	ldr	r1, [r0, #0]
	LDR R2, =0xA00A00
 800020a:	4a6e      	ldr	r2, [pc, #440]	; (80003c4 <finish_everything+0x10>)
	ORR R1, R2 @ Mask for pins to change to 'alternate function mode'
 800020c:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, GPIO_MODER]
 8000210:	6001      	str	r1, [r0, #0]

	@ set high speed for pins 4,5,10,11
	LDR R1, [R0, GPIO_OSPEEDR]
 8000212:	6881      	ldr	r1, [r0, #8]
	LDR R2, =0xF00F00
 8000214:	4a6c      	ldr	r2, [pc, #432]	; (80003c8 <finish_everything+0x14>)
	ORR R1, R2 @ mask for pins to be set as high speed
 8000216:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, GPIO_OSPEEDR]
 800021a:	6081      	str	r1, [r0, #8]

	@ set USART1 enable bit
	LDR R0, =RCC 			@ the base address for the register to turn clocks on/off
 800021c:	4866      	ldr	r0, [pc, #408]	; (80003b8 <finish_everything+0x4>)
	LDR R1, [R0, #APB2ENR]	@ load the original value from the enable register
 800021e:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << USART1_EN	@ apply the bit mask to the previous values of the enable the UART
 8000220:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
	STR R1, [R0, #APB2ENR]	@ store the modified enable register values back to RCC
 8000224:	6181      	str	r1, [r0, #24]

	@ set UART4 enable bit
	LDR R1, [R0, #APB1ENR]
 8000226:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << UART4_EN
 8000228:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
	STR R1, [R0, #APB1ENR]
 800022c:	61c1      	str	r1, [r0, #28]

	@ set the baud rate (115200)
	MOV R1, #0x46				@ calculated value using the base speed of 8MHz
 800022e:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =USART1 			@ USART1 base address
 8000232:	4866      	ldr	r0, [pc, #408]	; (80003cc <finish_everything+0x18>)
	STRH R1, [R0, #USART_BRR]
 8000234:	8181      	strh	r1, [r0, #12]
	LDR R0, =UART4				@ UART4 base address
 8000236:	4866      	ldr	r0, [pc, #408]	; (80003d0 <finish_everything+0x1c>)
	STRH R1, [R0, #USART_BRR]
 8000238:	8181      	strh	r1, [r0, #12]

	@ enable USART1 transmitting and receiving
	LDR R0, =USART1
 800023a:	4864      	ldr	r0, [pc, #400]	; (80003cc <finish_everything+0x18>)
	LDR R1, [R0, #USART_CR1]
 800023c:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE
 800023e:	f041 010d 	orr.w	r1, r1, #13
	STR R1, [R0, #USART_CR1]
 8000242:	6001      	str	r1, [r0, #0]

	@ enable UART4 transmitting and receiving
	LDR R0, =UART4
 8000244:	4862      	ldr	r0, [pc, #392]	; (80003d0 <finish_everything+0x1c>)
	LDR R1, [R0, #USART_CR1]
 8000246:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE
 8000248:	f041 010d 	orr.w	r1, r1, #13
	STR R1, [R0, #USART_CR1]
 800024c:	6001      	str	r1, [r0, #0]

	BX LR @ return
 800024e:	4770      	bx	lr

08000250 <initialise_power>:

@ initialise the power systems on the microcontroller
@ PWREN (enable power to the clock), SYSCFGEN system clock enable
initialise_power:

	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000250:	4859      	ldr	r0, [pc, #356]	; (80003b8 <finish_everything+0x4>)

	@ enable clock power in APB1ENR
	LDR R1, [R0, #APB1ENR]
 8000252:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN @ apply the bit mask for power enable
 8000254:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
	STR R1, [R0, #APB1ENR]
 8000258:	61c1      	str	r1, [r0, #28]

	@ enable clock config in APB2ENR
	LDR R1, [R0, #APB2ENR]
 800025a:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN @ apply the bit mask to allow clock configuration
 800025c:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR]
 8000260:	6181      	str	r1, [r0, #24]

	BX LR @ return
 8000262:	4770      	bx	lr

08000264 <sub_cipher>:



sub_cipher:

	LDR R0, =substitution_table @ address of the substitution_table
 8000264:	485b      	ldr	r0, [pc, #364]	; (80003d4 <finish_everything+0x20>)
	LDR R3, =0x00 				@ counter to the current place in the string
 8000266:	f04f 0300 	mov.w	r3, #0

0800026a <string_loop>:


string_loop:

	LDRB R5, [R1, R3]		@ load current letter into R5
 800026a:	5ccd      	ldrb	r5, [r1, r3]
	CMP R5, #0x0D			@ check if carriage return character
 800026c:	2d0d      	cmp	r5, #13
	BEQ finish				@ finish encode/decode
 800026e:	d019      	beq.n	80002a4 <finish>

	@ check if character is a lowercase letter
	CMP R5, #97
 8000270:	2d61      	cmp	r5, #97	; 0x61
	BLT end_of_letter 		@ if less than 'a', skip substitution
 8000272:	db14      	blt.n	800029e <end_of_letter>
	CMP R5, #122
 8000274:	2d7a      	cmp	r5, #122	; 0x7a
	BGT end_of_letter		@ if greater than 'z', skip substitution
 8000276:	dc12      	bgt.n	800029e <end_of_letter>

	@ check encoding or decoding mode
	CMP R2, #0
 8000278:	2a00      	cmp	r2, #0
	BEQ encoding_mode 		@ if R2 = 0, enter encoding mode
 800027a:	d000      	beq.n	800027e <encoding_mode>
	B decoding_mode			@ if R2 != 0, enter decoding mode
 800027c:	e004      	b.n	8000288 <decoding_mode>

0800027e <encoding_mode>:


encoding_mode:

	SUB R5, #97 		@ convert into character index (0-25)
 800027e:	f1a5 0561 	sub.w	r5, r5, #97	; 0x61
	LDRB R6, [R0, R5]	@ load encoded character into R6
 8000282:	5d46      	ldrb	r6, [r0, r5]
	STRB R6, [R1, R3]	@ store encoded character in the ascii string
 8000284:	54ce      	strb	r6, [r1, r3]
	B end_of_letter 	@ return to string loop
 8000286:	e00a      	b.n	800029e <end_of_letter>

08000288 <decoding_mode>:


decoding_mode:

	MOV R6, #-1	@ cipher index
 8000288:	f04f 36ff 	mov.w	r6, #4294967295

0800028c <find_cipher_index>:

	@ loop to find cipher index of current letter
	find_cipher_index:
		ADD R6, #1				@ increment index by 1
 800028c:	f106 0601 	add.w	r6, r6, #1
		LDRB R7, [R0, R6] 		@ load letter at index R6 into R7
 8000290:	5d87      	ldrb	r7, [r0, r6]
		CMP R5, R7				@ check if letter at the index and current letter are equal
 8000292:	42bd      	cmp	r5, r7
		BNE find_cipher_index	@ return to start of loop
 8000294:	d1fa      	bne.n	800028c <find_cipher_index>

	ADD R6, #97			@ decodes R6 to the correct ASCII value
 8000296:	f106 0661 	add.w	r6, r6, #97	; 0x61
	STRB R6, [R1, R3]	@ store decoded character in the ascii string
 800029a:	54ce      	strb	r6, [r1, r3]
	B end_of_letter		@ return to string loop
 800029c:	e7ff      	b.n	800029e <end_of_letter>

0800029e <end_of_letter>:


end_of_letter:

	ADD R3, #1		@ increment letter counter by 1
 800029e:	f103 0301 	add.w	r3, r3, #1
	B string_loop	@ return to string loop
 80002a2:	e7e2      	b.n	800026a <string_loop>

080002a4 <finish>:


finish:

	BX LR
 80002a4:	4770      	bx	lr

080002a6 <letter_count>:
.text


letter_count:

	MOV R2, #0  	@ number of leds to be turned on
 80002a6:	f04f 0200 	mov.w	r2, #0
	MOV R3, #0 		@ counter to the current place in the string
 80002aa:	f04f 0300 	mov.w	r3, #0
	MOV R4, #0		@ check if all 26 letters in the alphabet have been checked
 80002ae:	f04f 0400 	mov.w	r4, #0
	LDR R5, =0x61  	@current letter that are being counted
 80002b2:	f04f 0561 	mov.w	r5, #97	; 0x61

080002b6 <count_loop>:


count_loop:

	CMP R4, #27 @ check if all 26 letters have been checked
 80002b6:	2c1b      	cmp	r4, #27
	BEQ stop_count
 80002b8:	d025      	beq.n	8000306 <stop_count>

	LDRB R0, [R1, R3]	@ load current letter into R0
 80002ba:	5cc8      	ldrb	r0, [r1, r3]
	CMP R0, #0x0D 		@ check if the end of the string
 80002bc:	280d      	cmp	r0, #13
	BEQ end_of_string
 80002be:	d004      	beq.n	80002ca <end_of_string>

	CMP R5, R0 @ check if it is the same letter
 80002c0:	4285      	cmp	r5, r0
	BEQ add_led @ one led needs to be added
 80002c2:	d009      	beq.n	80002d8 <add_led>
	ADD R3, #1
 80002c4:	f103 0301 	add.w	r3, r3, #1
	B count_loop
 80002c8:	e7f5      	b.n	80002b6 <count_loop>

080002ca <end_of_string>:


end_of_string:

	ADD R4, #1 	@ store the next letter in the alphabet that needs to be checked into R4
 80002ca:	f104 0401 	add.w	r4, r4, #1
	MOV R3, #0 	@ reset current letter checker
 80002ce:	f04f 0300 	mov.w	r3, #0
	LDR R6, =0b00000000 @ set led bitmask
 80002d2:	f04f 0600 	mov.w	r6, #0
	B set_bitmask
 80002d6:	e004      	b.n	80002e2 <set_bitmask>

080002d8 <add_led>:


add_led:

	ADD R2, #1
 80002d8:	f102 0201 	add.w	r2, r2, #1
	ADD R3, #1
 80002dc:	f103 0301 	add.w	r3, r3, #1
	B count_loop
 80002e0:	e7e9      	b.n	80002b6 <count_loop>

080002e2 <set_bitmask>:


set_bitmask:

	CMP R2, #0
 80002e2:	2a00      	cmp	r2, #0
	BEQ turn_led
 80002e4:	d005      	beq.n	80002f2 <turn_led>

	LSLS R6, R6, #1
 80002e6:	0076      	lsls	r6, r6, #1
	ORR R6, R6, #1
 80002e8:	f046 0601 	orr.w	r6, r6, #1

	SUB R2, #1
 80002ec:	f1a2 0201 	sub.w	r2, r2, #1
	B set_bitmask
 80002f0:	e7f7      	b.n	80002e2 <set_bitmask>

080002f2 <turn_led>:


turn_led:

	LDR R0, =GPIOE
 80002f2:	4832      	ldr	r0, [pc, #200]	; (80003bc <finish_everything+0x8>)
	STRB R6, [R0, #ODR + 1]
 80002f4:	7546      	strb	r6, [r0, #21]
	ADD R5, #1
 80002f6:	f105 0501 	add.w	r5, r5, #1
	B delay_function
 80002fa:	e7ff      	b.n	80002fc <delay_function>

080002fc <delay_function>:


delay_function:

	LDR R2, =0x7A120
 80002fc:	4a36      	ldr	r2, [pc, #216]	; (80003d8 <finish_everything+0x24>)
	B delay_loop
 80002fe:	e7ff      	b.n	8000300 <delay_loop>

08000300 <delay_loop>:

delay_loop:

	SUBS R2, #1
 8000300:	3a01      	subs	r2, #1
	BGT delay_loop
 8000302:	dcfd      	bgt.n	8000300 <delay_loop>
	B count_loop
 8000304:	e7d7      	b.n	80002b6 <count_loop>

08000306 <stop_count>:


stop_count:

	BX LR 	@ return
 8000306:	4770      	bx	lr

08000308 <rx_loop>:


rx_loop:

	@ load UART status register
	LDR R3, [R0, USART_ISR]
 8000308:	69c3      	ldr	r3, [r0, #28]

	@ check if there is a byte ready to read
	TST R3, 1 << UART_RXNE
 800030a:	f013 0f20 	tst.w	r3, #32
	BEQ rx_loop
 800030e:	d0fb      	beq.n	8000308 <rx_loop>

	@ store byte in the buffer and increment buffer position
	LDRB R3, [R0, USART_RDR]
 8000310:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
	STRB R3, [R1, R8]
 8000314:	f801 3008 	strb.w	r3, [r1, r8]
	ADD R8, #1
 8000318:	f108 0801 	add.w	r8, r8, #1

	@ load current byte, check for carriage return (enter key)
	CMP R3, #0x0D
 800031c:	2b0d      	cmp	r3, #13
	BEQ finish_read
 800031e:	d00a      	beq.n	8000336 <finish_read>

	@ if R5 is one, only transmit one byte at a time
	CMP R5, #1
 8000320:	2d01      	cmp	r5, #1
	BEQ finish_read
 8000322:	d008      	beq.n	8000336 <finish_read>

	@ check if transmission exceeds buffer size
	CMP R7, R8
 8000324:	4547      	cmp	r7, r8
	BGT no_reset
 8000326:	dc01      	bgt.n	800032c <no_reset>
	MOV R8, #0 @ reset the buffer position
 8000328:	f04f 0800 	mov.w	r8, #0

0800032c <no_reset>:


no_reset:

	@ refreshes the RXNE flag (prevents overrun error)
	LDR R3, [R0, USART_RQR]
 800032c:	6983      	ldr	r3, [r0, #24]
	ORR R3, 1 << UART_RXFRQ
 800032e:	f043 0308 	orr.w	r3, r3, #8
	STR R3, [R0, USART_RQR]
 8000332:	6183      	str	r3, [r0, #24]

	BGT rx_loop
 8000334:	dce8      	bgt.n	8000308 <rx_loop>

08000336 <finish_read>:


finish_read:

	@ reset buffer position
	MOV R8, #0
 8000336:	f04f 0800 	mov.w	r8, #0

	BX LR
 800033a:	4770      	bx	lr

0800033c <return_after_tx>:


return_after_tx:

	@ store where to return to so it doesn't get overwritten
	MOV R6, LR
 800033c:	4676      	mov	r6, lr

	B tx_loop
 800033e:	e7ff      	b.n	8000340 <tx_loop>

08000340 <tx_loop>:


tx_loop:

	@ wait until ready to transmit
	BL wait_for_ISR
 8000340:	f000 f807 	bl	8000352 <wait_for_ISR>

	@ load the current byte
	LDRB R3, [R1], #1
 8000344:	f811 3b01 	ldrb.w	r3, [r1], #1
	STRB R3, [R0, USART_TDR]
 8000348:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28

	@ check for carriage return (enter key), indicating to stop transmitting
	CMP R3, #0x0D
 800034c:	2b0d      	cmp	r3, #13
	BEQ finish_transmit
 800034e:	d005      	beq.n	800035c <finish_transmit>

	B tx_loop
 8000350:	e7f6      	b.n	8000340 <tx_loop>

08000352 <wait_for_ISR>:


wait_for_ISR:

	LDR R3, [R0, USART_ISR]
 8000352:	69c3      	ldr	r3, [r0, #28]
	ANDS R3, 1 << UART_TXE
 8000354:	f013 0380 	ands.w	r3, r3, #128	; 0x80
	BEQ wait_for_ISR
 8000358:	d0fb      	beq.n	8000352 <wait_for_ISR>

	BX LR
 800035a:	4770      	bx	lr

0800035c <finish_transmit>:


finish_transmit:

	BL wait_for_ISR
 800035c:	f7ff fff9 	bl	8000352 <wait_for_ISR>

	@ transmit a newline character
	MOV R3, #0x0A
 8000360:	f04f 030a 	mov.w	r3, #10
	STRB R3, [R0, USART_TDR]
 8000364:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28

	BX R6
 8000368:	4730      	bx	r6

0800036a <main>:

main:

	@ functions for set up
	@ BL enable_timer2_clock
	BL enable_peripheral_clocks
 800036a:	f7ff ff39 	bl	80001e0 <enable_peripheral_clocks>
	BL initialise_discovery_board
 800036e:	f7ff ff3d 	bl	80001ec <initialise_discovery_board>
	BL initialise_power
 8000372:	f7ff ff6d 	bl	8000250 <initialise_power>
	BL enable_uart
 8000376:	f7ff ff3e 	bl	80001f6 <enable_uart>

	B initialise_registers
 800037a:	e7ff      	b.n	800037c <initialise_registers>

0800037c <initialise_registers>:


initialise_registers:

	LDR R1, =incoming_buffer	@ buffer for storing string read in
 800037c:	4917      	ldr	r1, [pc, #92]	; (80003dc <finish_everything+0x28>)
	LDR R7, =buffer_size		@ size of buffer
 800037e:	4f18      	ldr	r7, [pc, #96]	; (80003e0 <finish_everything+0x2c>)
	LDRB R7, [R7]				@ de-reference R7
 8000380:	783f      	ldrb	r7, [r7, #0]
	MOV R8, #0x00				@ counter for how many letters received
 8000382:	f04f 0800 	mov.w	r8, #0

	@ uncomment for reading or transmitting:
	B transmitting
 8000386:	e7ff      	b.n	8000388 <transmitting>

08000388 <transmitting>:



transmitting:

	LDR R0, =USART1 	@ load USART1
 8000388:	4810      	ldr	r0, [pc, #64]	; (80003cc <finish_everything+0x18>)

	BL rx_loop			@ read from terminal, store message in R1
 800038a:	f7ff ffbd 	bl	8000308 <rx_loop>

	BL letter_count
 800038e:	f7ff ff8a 	bl	80002a6 <letter_count>
	B finish
 8000392:	e787      	b.n	80002a4 <finish>

	MOV R2, #0  		@ set R2 to 0 (encoding mode)
 8000394:	f04f 0200 	mov.w	r2, #0
	BL sub_cipher		@ encode message
 8000398:	f7ff ff64 	bl	8000264 <sub_cipher>

	LDR R0, =UART4		@ load UART4
 800039c:	480c      	ldr	r0, [pc, #48]	; (80003d0 <finish_everything+0x1c>)

	BL return_after_tx	@ transmit to the other board
 800039e:	f7ff ffcd 	bl	800033c <return_after_tx>

	B finish_everything
 80003a2:	e007      	b.n	80003b4 <finish_everything>

080003a4 <reading>:


reading:

	LDR R0, =UART4		@ load UART4
 80003a4:	480a      	ldr	r0, [pc, #40]	; (80003d0 <finish_everything+0x1c>)

	BL rx_loop			@ read from other board
 80003a6:	f7ff ffaf 	bl	8000308 <rx_loop>

	MOV R2, #1			@ set R2 to 1 (decoding mode)
 80003aa:	f04f 0201 	mov.w	r2, #1
	BL sub_cipher		@ decode message
 80003ae:	f7ff ff59 	bl	8000264 <sub_cipher>

	// BL letter_count		@ display number of letters on LED

	B finish_everything
 80003b2:	e7ff      	b.n	80003b4 <finish_everything>

080003b4 <finish_everything>:


finish_everything:

	B finish_everything
 80003b4:	e7fe      	b.n	80003b4 <finish_everything>
 80003b6:	0000      	.short	0x0000
	LDR R0, =RCC			@ load the base address for the timer
 80003b8:	40021000 	.word	0x40021000
	LDR R0, =GPIOE	@ load the address of the GPIOE register into R0
 80003bc:	48001000 	.word	0x48001000
	LDR R0, =GPIOC
 80003c0:	48000800 	.word	0x48000800
	LDR R2, =0xA00A00
 80003c4:	00a00a00 	.word	0x00a00a00
	LDR R2, =0xF00F00
 80003c8:	00f00f00 	.word	0x00f00f00
	LDR R0, =USART1 			@ USART1 base address
 80003cc:	40013800 	.word	0x40013800
	LDR R0, =UART4				@ UART4 base address
 80003d0:	40004c00 	.word	0x40004c00
	LDR R0, =substitution_table @ address of the substitution_table
 80003d4:	20000000 	.word	0x20000000
	LDR R2, =0x7A120
 80003d8:	0007a120 	.word	0x0007a120
	LDR R1, =incoming_buffer	@ buffer for storing string read in
 80003dc:	2000001c 	.word	0x2000001c
	LDR R7, =buffer_size		@ size of buffer
 80003e0:	2000005a 	.word	0x2000005a

080003e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003e4:	480d      	ldr	r0, [pc, #52]	; (800041c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003ec:	480c      	ldr	r0, [pc, #48]	; (8000420 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ee:	490d      	ldr	r1, [pc, #52]	; (8000424 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003f0:	4a0d      	ldr	r2, [pc, #52]	; (8000428 <LoopForever+0xe>)
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f4:	e002      	b.n	80003fc <LoopCopyDataInit>

080003f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003fa:	3304      	adds	r3, #4

080003fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000400:	d3f9      	bcc.n	80003f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000402:	4a0a      	ldr	r2, [pc, #40]	; (800042c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000404:	4c0a      	ldr	r4, [pc, #40]	; (8000430 <LoopForever+0x16>)
  movs r3, #0
 8000406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000408:	e001      	b.n	800040e <LoopFillZerobss>

0800040a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800040a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800040c:	3204      	adds	r2, #4

0800040e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800040e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000410:	d3fb      	bcc.n	800040a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000412:	f000 f811 	bl	8000438 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000416:	f7ff ffa8 	bl	800036a <main>

0800041a <LoopForever>:

LoopForever:
  b LoopForever
 800041a:	e7fe      	b.n	800041a <LoopForever>
  ldr   r0, =_estack
 800041c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000424:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000428:	080004a0 	.word	0x080004a0
  ldr r2, =_sbss
 800042c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000430:	20000078 	.word	0x20000078

08000434 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000434:	e7fe      	b.n	8000434 <ADC1_2_IRQHandler>
	...

08000438 <__libc_init_array>:
 8000438:	b570      	push	{r4, r5, r6, lr}
 800043a:	4d0d      	ldr	r5, [pc, #52]	; (8000470 <__libc_init_array+0x38>)
 800043c:	4c0d      	ldr	r4, [pc, #52]	; (8000474 <__libc_init_array+0x3c>)
 800043e:	1b64      	subs	r4, r4, r5
 8000440:	10a4      	asrs	r4, r4, #2
 8000442:	2600      	movs	r6, #0
 8000444:	42a6      	cmp	r6, r4
 8000446:	d109      	bne.n	800045c <__libc_init_array+0x24>
 8000448:	4d0b      	ldr	r5, [pc, #44]	; (8000478 <__libc_init_array+0x40>)
 800044a:	4c0c      	ldr	r4, [pc, #48]	; (800047c <__libc_init_array+0x44>)
 800044c:	f000 f818 	bl	8000480 <_init>
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	10a4      	asrs	r4, r4, #2
 8000454:	2600      	movs	r6, #0
 8000456:	42a6      	cmp	r6, r4
 8000458:	d105      	bne.n	8000466 <__libc_init_array+0x2e>
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000460:	4798      	blx	r3
 8000462:	3601      	adds	r6, #1
 8000464:	e7ee      	b.n	8000444 <__libc_init_array+0xc>
 8000466:	f855 3b04 	ldr.w	r3, [r5], #4
 800046a:	4798      	blx	r3
 800046c:	3601      	adds	r6, #1
 800046e:	e7f2      	b.n	8000456 <__libc_init_array+0x1e>
 8000470:	08000498 	.word	0x08000498
 8000474:	08000498 	.word	0x08000498
 8000478:	08000498 	.word	0x08000498
 800047c:	0800049c 	.word	0x0800049c

08000480 <_init>:
 8000480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000482:	bf00      	nop
 8000484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000486:	bc08      	pop	{r3}
 8000488:	469e      	mov	lr, r3
 800048a:	4770      	bx	lr

0800048c <_fini>:
 800048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048e:	bf00      	nop
 8000490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000492:	bc08      	pop	{r3}
 8000494:	469e      	mov	lr, r3
 8000496:	4770      	bx	lr
