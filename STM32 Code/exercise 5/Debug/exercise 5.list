
exercise 5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000214  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a8  080003a8  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a8  080003a8  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  080003a8  080003a8  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a8  080003a8  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a8  080003a8  000103a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003ac  080003ac  000103ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080003b0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          0000001c  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000044  20000044  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 14 .debug_line   00000151  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000b3  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000048  00000000  00000000  0002029f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  000202e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  00020310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000000a7  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  000203ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  00020418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000390 	.word	0x08000390

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	08000390 	.word	0x08000390

080001d4 <enable_timer2_clock>:



enable_timer2_clock:

	LDR R0, =RCC			@ load the base address for the timer
 80001d4:	483e      	ldr	r0, [pc, #248]	; (80002d0 <reading>)
	LDR R1, [R0, APB1ENR]	@ load the peripheral clock control register
 80001d6:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << TIM2EN 	@ store a 1 in bit for the TIM2 enable flag
 80001d8:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, APB1ENR] 	@ enable the timer
 80001dc:	61c1      	str	r1, [r0, #28]

	BX LR
 80001de:	4770      	bx	lr

080001e0 <enable_peripheral_clocks>:

@ enable peripheral clocks for A-E
enable_peripheral_clocks:

	@ load the address of the RCC address boundary (for enabling the IO clock)
	LDR R0, =RCC
 80001e0:	483b      	ldr	r0, [pc, #236]	; (80002d0 <reading>)

	@ enable all of the GPIO peripherals in AHBENR
	LDR R1, [R0, #AHBENR]
 80001e2:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOE_ENABLE | 1 << GPIOD_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOB_ENABLE | 1 << GPIOA_ENABLE
 80001e4:	f441 1178 	orr.w	r1, r1, #4063232	; 0x3e0000
	STR R1, [R0, #AHBENR]
 80001e8:	6141      	str	r1, [r0, #20]

	BX LR
 80001ea:	4770      	bx	lr

080001ec <initialise_discovery_board>:


@ initialise discovery board outputs
initialise_discovery_board:
	LDR R0, =GPIOE	@ load the address of the GPIOE register into R0
 80001ec:	4839      	ldr	r0, [pc, #228]	; (80002d4 <reading+0x4>)
	LDR R1, =0x5555 @ set LED pins as outputs
 80001ee:	f245 5155 	movw	r1, #21845	; 0x5555
	STRH R1, [R0, #GPIO_MODER + 2]
 80001f2:	8041      	strh	r1, [r0, #2]

	BX LR
 80001f4:	4770      	bx	lr

080001f6 <enable_uart>:

enable_uart:
	@ enable USART1 and UART4
	@ UART1 uses pc4 and pc5, UART4 uses pc10 and pc11

	LDR R0, =GPIOC
 80001f6:	4838      	ldr	r0, [pc, #224]	; (80002d8 <reading+0x8>)

	@ set AF7 for pc4 & pc5
	LDR R1, =0x77
 80001f8:	f04f 0177 	mov.w	r1, #119	; 0x77
	STRB R1, [R0, AFRL + 2]
 80001fc:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22

	@ set AF5 for pc10 & pc11
	LDR R1, =0x55
 8000200:	f04f 0155 	mov.w	r1, #85	; 0x55
	STRB R1, [R0, AFRH + 1]
 8000204:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25

	@ modify pins 4,5,10,11 for alternate function mode
	LDR R1, [R0, GPIO_MODER]
 8000208:	6801      	ldr	r1, [r0, #0]
	LDR R2, =0xA00A00
 800020a:	4a34      	ldr	r2, [pc, #208]	; (80002dc <reading+0xc>)
	ORR R1, R2 @ Mask for pins to change to 'alternate function mode'
 800020c:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, GPIO_MODER]
 8000210:	6001      	str	r1, [r0, #0]

	@ set high speed for pins 4,5,10,11
	LDR R1, [R0, GPIO_OSPEEDR]
 8000212:	6881      	ldr	r1, [r0, #8]
	LDR R2, =0xF00F00
 8000214:	4a32      	ldr	r2, [pc, #200]	; (80002e0 <reading+0x10>)
	ORR R1, R2 @ mask for pins to be set as high speed
 8000216:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, GPIO_OSPEEDR]
 800021a:	6081      	str	r1, [r0, #8]

	@ set USART1 enable bit
	LDR R0, =RCC 			@ the base address for the register to turn clocks on/off
 800021c:	482c      	ldr	r0, [pc, #176]	; (80002d0 <reading>)
	LDR R1, [R0, #APB2ENR]	@ load the original value from the enable register
 800021e:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << USART1_EN	@ apply the bit mask to the previous values of the enable the UART
 8000220:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
	STR R1, [R0, #APB2ENR]	@ store the modified enable register values back to RCC
 8000224:	6181      	str	r1, [r0, #24]

	@ set UART4 enable bit
	LDR R1, [R0, #APB1ENR]
 8000226:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << UART4_EN
 8000228:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
	STR R1, [R0, #APB1ENR]
 800022c:	61c1      	str	r1, [r0, #28]

	@ set the baud rate (115200)
	MOV R1, #0x46				@ calculated value using the base speed of 8MHz
 800022e:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =USART1 			@ USART1 base address
 8000232:	482c      	ldr	r0, [pc, #176]	; (80002e4 <reading+0x14>)
	STRH R1, [R0, #USART_BRR]
 8000234:	8181      	strh	r1, [r0, #12]
	LDR R0, =UART4				@ UART4 base address
 8000236:	482c      	ldr	r0, [pc, #176]	; (80002e8 <reading+0x18>)
	STRH R1, [R0, #USART_BRR]
 8000238:	8181      	strh	r1, [r0, #12]

	@ enable USART1 transmitting and receiving
	LDR R0, =USART1
 800023a:	482a      	ldr	r0, [pc, #168]	; (80002e4 <reading+0x14>)
	LDR R1, [R0, #USART_CR1]
 800023c:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE
 800023e:	f041 010d 	orr.w	r1, r1, #13
	STR R1, [R0, #USART_CR1]
 8000242:	6001      	str	r1, [r0, #0]

	@ enable UART4 transmitting and receiving
	LDR R0, =UART4
 8000244:	4828      	ldr	r0, [pc, #160]	; (80002e8 <reading+0x18>)
	LDR R1, [R0, #USART_CR1]
 8000246:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE
 8000248:	f041 010d 	orr.w	r1, r1, #13
	STR R1, [R0, #USART_CR1]
 800024c:	6001      	str	r1, [r0, #0]

	BX LR @ return
 800024e:	4770      	bx	lr

08000250 <initialise_power>:

@ initialise the power systems on the microcontroller
@ PWREN (enable power to the clock), SYSCFGEN system clock enable
initialise_power:

	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000250:	481f      	ldr	r0, [pc, #124]	; (80002d0 <reading>)

	@ enable clock power in APB1ENR
	LDR R1, [R0, #APB1ENR]
 8000252:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN @ apply the bit mask for power enable
 8000254:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
	STR R1, [R0, #APB1ENR]
 8000258:	61c1      	str	r1, [r0, #28]

	@ enable clock config in APB2ENR
	LDR R1, [R0, #APB2ENR]
 800025a:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN @ apply the bit mask to allow clock configuration
 800025c:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR]
 8000260:	6181      	str	r1, [r0, #24]

	BX LR @ return
 8000262:	4770      	bx	lr

08000264 <sub_cipher>:


@ this is the entry function called from the startup file
sub_cipher:

	LDR R0, =substitution_table @ address of the substitution_table
 8000264:	4821      	ldr	r0, [pc, #132]	; (80002ec <reading+0x1c>)
	LDR R1, =ascii_string 		@ the address of the current string
 8000266:	4922      	ldr	r1, [pc, #136]	; (80002f0 <reading+0x20>)
	LDR R2, =0x00  				@ 0: encoding mode, other: decoding mode
 8000268:	f04f 0200 	mov.w	r2, #0
	LDR R3, =0x00 				@ counter to the current place in the string
 800026c:	f04f 0300 	mov.w	r3, #0
	LDR R4, =0x01				@ number of decodes/encodes
 8000270:	f04f 0401 	mov.w	r4, #1

08000274 <string_loop>:


string_loop:
	CMP R4, #0 				@ check if number of decodes/encodes reached zero
 8000274:	2c00      	cmp	r4, #0
	BEQ finished_everything @ exit loop
 8000276:	d021      	beq.n	80002bc <finished_everything>
	LDRB R5, [R1, R3]		@ load current letter into R5
 8000278:	5ccd      	ldrb	r5, [r1, r3]
	CMP R5, #0				@ check if null terminator
 800027a:	2d00      	cmp	r5, #0
	BEQ end_of_string		@ enter end of string loop
 800027c:	d019      	beq.n	80002b2 <end_of_string>

	@ check if character is a lowercase letter
	CMP R5, #97
 800027e:	2d61      	cmp	r5, #97	; 0x61
	BLT end_of_letter 		@ if less than 'a', skip substitution
 8000280:	db14      	blt.n	80002ac <end_of_letter>
	CMP R5, #122
 8000282:	2d7a      	cmp	r5, #122	; 0x7a
	BGT end_of_letter		@ if greater than 'z', skip substitution
 8000284:	dc12      	bgt.n	80002ac <end_of_letter>

	@ check encoding or decoding mode
	CMP R2, #0
 8000286:	2a00      	cmp	r2, #0
	BEQ encoding_mode 		@ if R2 = 0, enter encoding mode
 8000288:	d000      	beq.n	800028c <encoding_mode>
	B decoding_mode			@ if R2 != 0, enter decoding mode
 800028a:	e004      	b.n	8000296 <decoding_mode>

0800028c <encoding_mode>:


encoding_mode:
	SUB R5, #97 		@ convert into character index (0-25)
 800028c:	f1a5 0561 	sub.w	r5, r5, #97	; 0x61
	LDRB R6, [R0, R5]	@ load encoded character into R6
 8000290:	5d46      	ldrb	r6, [r0, r5]
	STRB R6, [R1, R3]	@ store encoded character in the ascii string
 8000292:	54ce      	strb	r6, [r1, r3]
	B end_of_letter 	@ return to string loop
 8000294:	e00a      	b.n	80002ac <end_of_letter>

08000296 <decoding_mode>:


decoding_mode:
	MOV R6, #-1	@ cipher index
 8000296:	f04f 36ff 	mov.w	r6, #4294967295

0800029a <find_cipher_index>:

	@ loop to find cipher index of current letter
	find_cipher_index:
		ADD R6, #1				@ increment index by 1
 800029a:	f106 0601 	add.w	r6, r6, #1
		LDRB R7, [R0, R6] 		@ load letter at index R6 into R7
 800029e:	5d87      	ldrb	r7, [r0, r6]
		CMP R5, R7				@ check if letter at the index and current letter are equal
 80002a0:	42bd      	cmp	r5, r7
		BNE find_cipher_index	@ return to start of loop
 80002a2:	d1fa      	bne.n	800029a <find_cipher_index>

	ADD R6, #97			@ decodes R6 to the correct ASCII value
 80002a4:	f106 0661 	add.w	r6, r6, #97	; 0x61
	STRB R6, [R1, R3]	@ store decoded character in the ascii string
 80002a8:	54ce      	strb	r6, [r1, r3]
	B end_of_letter		@ return to string loop
 80002aa:	e7ff      	b.n	80002ac <end_of_letter>

080002ac <end_of_letter>:


end_of_letter:
	ADD R3, #1		@ increment letter counter by 1
 80002ac:	f103 0301 	add.w	r3, r3, #1
	B string_loop	@ return to string loop
 80002b0:	e7e0      	b.n	8000274 <string_loop>

080002b2 <end_of_string>:


end_of_string:
	SUB R4, #1		@ decrease number of encodes/decodes by 1
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
	MOV R3, #0		@ reset letter counter
 80002b6:	f04f 0300 	mov.w	r3, #0
	B string_loop	@ return to string loop
 80002ba:	e7db      	b.n	8000274 <string_loop>

080002bc <finished_everything>:


finished_everything:

	B finished_everything	@ infinite loop here
 80002bc:	e7fe      	b.n	80002bc <finished_everything>

080002be <main>:

main:

	@ functions for set up
	@ BL enable_timer2_clock
	BL initialise_discovery_board
 80002be:	f7ff ff95 	bl	80001ec <initialise_discovery_board>
	BL initialise_power
 80002c2:	f7ff ffc5 	bl	8000250 <initialise_power>
	BL enable_peripheral_clocks
 80002c6:	f7ff ff8b 	bl	80001e0 <enable_peripheral_clocks>
	BL enable_uart
 80002ca:	f7ff ff94 	bl	80001f6 <enable_uart>

080002ce <transmitting>:
	@ code 1 reads from terminal, encode using sub cipher, transmit to second board
	@ code 2 reads from UART4, decondes message, count how many letters using LED

transmitting:

	B sub_cipher
 80002ce:	e7c9      	b.n	8000264 <sub_cipher>

080002d0 <reading>:
	LDR R0, =RCC			@ load the base address for the timer
 80002d0:	40021000 	.word	0x40021000
	LDR R0, =GPIOE	@ load the address of the GPIOE register into R0
 80002d4:	48001000 	.word	0x48001000
	LDR R0, =GPIOC
 80002d8:	48000800 	.word	0x48000800
	LDR R2, =0xA00A00
 80002dc:	00a00a00 	.word	0x00a00a00
	LDR R2, =0xF00F00
 80002e0:	00f00f00 	.word	0x00f00f00
	LDR R0, =USART1 			@ USART1 base address
 80002e4:	40013800 	.word	0x40013800
	LDR R0, =UART4				@ UART4 base address
 80002e8:	40004c00 	.word	0x40004c00
	LDR R0, =substitution_table @ address of the substitution_table
 80002ec:	2000000d 	.word	0x2000000d
	LDR R1, =ascii_string 		@ the address of the current string
 80002f0:	20000000 	.word	0x20000000

080002f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f4:	480d      	ldr	r0, [pc, #52]	; (800032c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002fc:	480c      	ldr	r0, [pc, #48]	; (8000330 <LoopForever+0x6>)
  ldr r1, =_edata
 80002fe:	490d      	ldr	r1, [pc, #52]	; (8000334 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000300:	4a0d      	ldr	r2, [pc, #52]	; (8000338 <LoopForever+0xe>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000304:	e002      	b.n	800030c <LoopCopyDataInit>

08000306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030a:	3304      	adds	r3, #4

0800030c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800030c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000310:	d3f9      	bcc.n	8000306 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000312:	4a0a      	ldr	r2, [pc, #40]	; (800033c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000314:	4c0a      	ldr	r4, [pc, #40]	; (8000340 <LoopForever+0x16>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000318:	e001      	b.n	800031e <LoopFillZerobss>

0800031a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800031c:	3204      	adds	r2, #4

0800031e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000320:	d3fb      	bcc.n	800031a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000322:	f000 f811 	bl	8000348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000326:	f7ff ffca 	bl	80002be <main>

0800032a <LoopForever>:

LoopForever:
  b LoopForever
 800032a:	e7fe      	b.n	800032a <LoopForever>
  ldr   r0, =_estack
 800032c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000334:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000338:	080003b0 	.word	0x080003b0
  ldr r2, =_sbss
 800033c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000340:	20000044 	.word	0x20000044

08000344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000344:	e7fe      	b.n	8000344 <ADC1_2_IRQHandler>
	...

08000348 <__libc_init_array>:
 8000348:	b570      	push	{r4, r5, r6, lr}
 800034a:	4d0d      	ldr	r5, [pc, #52]	; (8000380 <__libc_init_array+0x38>)
 800034c:	4c0d      	ldr	r4, [pc, #52]	; (8000384 <__libc_init_array+0x3c>)
 800034e:	1b64      	subs	r4, r4, r5
 8000350:	10a4      	asrs	r4, r4, #2
 8000352:	2600      	movs	r6, #0
 8000354:	42a6      	cmp	r6, r4
 8000356:	d109      	bne.n	800036c <__libc_init_array+0x24>
 8000358:	4d0b      	ldr	r5, [pc, #44]	; (8000388 <__libc_init_array+0x40>)
 800035a:	4c0c      	ldr	r4, [pc, #48]	; (800038c <__libc_init_array+0x44>)
 800035c:	f000 f818 	bl	8000390 <_init>
 8000360:	1b64      	subs	r4, r4, r5
 8000362:	10a4      	asrs	r4, r4, #2
 8000364:	2600      	movs	r6, #0
 8000366:	42a6      	cmp	r6, r4
 8000368:	d105      	bne.n	8000376 <__libc_init_array+0x2e>
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000370:	4798      	blx	r3
 8000372:	3601      	adds	r6, #1
 8000374:	e7ee      	b.n	8000354 <__libc_init_array+0xc>
 8000376:	f855 3b04 	ldr.w	r3, [r5], #4
 800037a:	4798      	blx	r3
 800037c:	3601      	adds	r6, #1
 800037e:	e7f2      	b.n	8000366 <__libc_init_array+0x1e>
 8000380:	080003a8 	.word	0x080003a8
 8000384:	080003a8 	.word	0x080003a8
 8000388:	080003a8 	.word	0x080003a8
 800038c:	080003ac 	.word	0x080003ac

08000390 <_init>:
 8000390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000392:	bf00      	nop
 8000394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000396:	bc08      	pop	{r3}
 8000398:	469e      	mov	lr, r3
 800039a:	4770      	bx	lr

0800039c <_fini>:
 800039c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039e:	bf00      	nop
 80003a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a2:	bc08      	pop	{r3}
 80003a4:	469e      	mov	lr, r3
 80003a6:	4770      	bx	lr
