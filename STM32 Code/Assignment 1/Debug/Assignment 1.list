
Assignment 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000012c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002c0  080002c0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002c0  080002c0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080002c0  080002c0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002c0  080002c0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002c0  080002c0  000102c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002c4  080002c4  000102c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080002c8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          0000001c  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000034  20000034  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_line   000000dc  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000a4  00000000  00000000  00020167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000047  00000000  00000000  0002020b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  00020252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  00020278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000000b0  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  00020370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  0002038c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002a8 	.word	0x080002a8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	080002a8 	.word	0x080002a8

080001d4 <main>:


@ this is the entry function called from the startup file
main:

	LDR R0, =string_buffer
 80001d4:	480b      	ldr	r0, [pc, #44]	; (8000204 <finished_everything+0x4>)
	LDR R1, =ascii_string  @ the address of the string
 80001d6:	490c      	ldr	r1, [pc, #48]	; (8000208 <finished_everything+0x8>)
	LDR R2, =0x00  @
 80001d8:	f04f 0200 	mov.w	r2, #0
	LDR R3, =0x00 	@ counter to the current place in the string
 80001dc:	f04f 0300 	mov.w	r3, #0

080001e0 <string_loop>:

string_loop:
	LDRB R3, [R1, R3]	@ load the byte from the ascii_string (byte number R2)
 80001e0:	5ccb      	ldrb	r3, [r1, r3]
	STRB R3, [R2, R3]	@ store the byte in the string_buffer (byte number R2)
 80001e2:	54d3      	strb	r3, [r2, r3]
	CMP R2, #0 @ Test to see whether this byte is zero
 80001e4:	2a00      	cmp	r2, #0
	BEQ lowercase_loop @loop to lower case if R2 is 0
 80001e6:	d000      	beq.n	80001ea <lowercase_loop>
	B uppercase_loop @else looop to uppercase
 80001e8:	e00a      	b.n	8000200 <finished_everything>

080001ea <lowercase_loop>:


lowercase_loop:
	LDRB R4, [R1, R3] @load current letter into R4
 80001ea:	5ccc      	ldrb	r4, [r1, r3]
	ADD R3, #1
 80001ec:	f103 0301 	add.w	r3, r3, #1
	@LDR R3, #1 @increment to the next letter
	CMP R4, #0 @ check if the end of the string
 80001f0:	2c00      	cmp	r4, #0
	BEQ finished_everything
 80001f2:	d005      	beq.n	8000200 <finished_everything>
	SUBS R4, #97 @subtract 97 from ASCII value
 80001f4:	3c61      	subs	r4, #97	; 0x61

	BMI make_lowercase @if negative then the letter is uppercase
 80001f6:	d400      	bmi.n	80001fa <make_lowercase>

	LDRB R0, [R4] @putes new letter into buffer
 80001f8:	7820      	ldrb	r0, [r4, #0]

080001fa <make_lowercase>:


make_lowercase:
	LDRB R0, [R4,#32]@ turns uppercase into lowercase
 80001fa:	f894 0020 	ldrb.w	r0, [r4, #32]
	B lowercase_loop @exits loop
 80001fe:	e7f4      	b.n	80001ea <lowercase_loop>

08000200 <finished_everything>:



finished_everything:

	B finished_everything 	@ infinite loop here
 8000200:	e7fe      	b.n	8000200 <finished_everything>
 8000202:	0000      	.short	0x0000
	LDR R0, =string_buffer
 8000204:	20000014 	.word	0x20000014
	LDR R1, =ascii_string  @ the address of the string
 8000208:	20000000 	.word	0x20000000

0800020c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800020c:	480d      	ldr	r0, [pc, #52]	; (8000244 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800020e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000210:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000214:	480c      	ldr	r0, [pc, #48]	; (8000248 <LoopForever+0x6>)
  ldr r1, =_edata
 8000216:	490d      	ldr	r1, [pc, #52]	; (800024c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000218:	4a0d      	ldr	r2, [pc, #52]	; (8000250 <LoopForever+0xe>)
  movs r3, #0
 800021a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800021c:	e002      	b.n	8000224 <LoopCopyDataInit>

0800021e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800021e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000222:	3304      	adds	r3, #4

08000224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000228:	d3f9      	bcc.n	800021e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800022a:	4a0a      	ldr	r2, [pc, #40]	; (8000254 <LoopForever+0x12>)
  ldr r4, =_ebss
 800022c:	4c0a      	ldr	r4, [pc, #40]	; (8000258 <LoopForever+0x16>)
  movs r3, #0
 800022e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000230:	e001      	b.n	8000236 <LoopFillZerobss>

08000232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000234:	3204      	adds	r2, #4

08000236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000238:	d3fb      	bcc.n	8000232 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800023a:	f000 f811 	bl	8000260 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800023e:	f7ff ffc9 	bl	80001d4 <main>

08000242 <LoopForever>:

LoopForever:
  b LoopForever
 8000242:	e7fe      	b.n	8000242 <LoopForever>
  ldr   r0, =_estack
 8000244:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800024c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000250:	080002c8 	.word	0x080002c8
  ldr r2, =_sbss
 8000254:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000258:	20000034 	.word	0x20000034

0800025c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800025c:	e7fe      	b.n	800025c <ADC1_2_IRQHandler>
	...

08000260 <__libc_init_array>:
 8000260:	b570      	push	{r4, r5, r6, lr}
 8000262:	4d0d      	ldr	r5, [pc, #52]	; (8000298 <__libc_init_array+0x38>)
 8000264:	4c0d      	ldr	r4, [pc, #52]	; (800029c <__libc_init_array+0x3c>)
 8000266:	1b64      	subs	r4, r4, r5
 8000268:	10a4      	asrs	r4, r4, #2
 800026a:	2600      	movs	r6, #0
 800026c:	42a6      	cmp	r6, r4
 800026e:	d109      	bne.n	8000284 <__libc_init_array+0x24>
 8000270:	4d0b      	ldr	r5, [pc, #44]	; (80002a0 <__libc_init_array+0x40>)
 8000272:	4c0c      	ldr	r4, [pc, #48]	; (80002a4 <__libc_init_array+0x44>)
 8000274:	f000 f818 	bl	80002a8 <_init>
 8000278:	1b64      	subs	r4, r4, r5
 800027a:	10a4      	asrs	r4, r4, #2
 800027c:	2600      	movs	r6, #0
 800027e:	42a6      	cmp	r6, r4
 8000280:	d105      	bne.n	800028e <__libc_init_array+0x2e>
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f855 3b04 	ldr.w	r3, [r5], #4
 8000288:	4798      	blx	r3
 800028a:	3601      	adds	r6, #1
 800028c:	e7ee      	b.n	800026c <__libc_init_array+0xc>
 800028e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000292:	4798      	blx	r3
 8000294:	3601      	adds	r6, #1
 8000296:	e7f2      	b.n	800027e <__libc_init_array+0x1e>
 8000298:	080002c0 	.word	0x080002c0
 800029c:	080002c0 	.word	0x080002c0
 80002a0:	080002c0 	.word	0x080002c0
 80002a4:	080002c4 	.word	0x080002c4

080002a8 <_init>:
 80002a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002aa:	bf00      	nop
 80002ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ae:	bc08      	pop	{r3}
 80002b0:	469e      	mov	lr, r3
 80002b2:	4770      	bx	lr

080002b4 <_fini>:
 80002b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002b6:	bf00      	nop
 80002b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ba:	bc08      	pop	{r3}
 80002bc:	469e      	mov	lr, r3
 80002be:	4770      	bx	lr
